[
{
		"title": "Exploratory Data Analysis and Visualization",
		"date":"Tue Oct 18 2022 00:00:00 GMT+0000 (Coordinated Universal Time)",
		"url":"/edav/",
		"content": "EDAV\n\nVisualization is a fundamentally human activity.\n\nflowchart LR\nA[Collect] --> B\nsubgraph I[Program]\nB[Import] --> C[Tidy]\nC --> D\n\nsubgraph G[Understand]\nD[Transform] --> E[Visualise]\nE --> F[Model]\nF --> D\nend\nend\nG --> H[Communicate]\n\nInterdisciplinary\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Statistics</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Computer Science</a>\nGraphic Design\nJournalism\nSubject Expertise\nPsychology\n\nFundamental problem\n\nExploration vs. Visualization\nExploratory vs. Explanatory\nNot mutually exclusive\nVisualizations offering insight are likely to be shared\n\n## Logistics\n\n- Aims\n- look for patterns\n- identify outliers\n- make comparisons\n- discover clusters\n- Textbook\n- *Graphical Data Analysis with R*\n- Website\n- &lt;https://edav.info&gt;\n- Requirements\n- Problems sets (5)\n- Midterm &amp; Final\n- Community contribution\n- Final project\n- Tools\n- [[R]]\n- [[JavaScript]]\n- <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS</a>)\n- Grade\n- 35% Final Project\n- 25% Problem Sets\n- 25% Final Exam\n- 10% Community Contribution\n- give a well-rehearsed 5 minute lightning talk in class (live or video) on a datavis topic (theory or tool) • create a cheatsheet or other resource\n- write a tutorial for a tool that's not well documented\n- build a viz product (ex. htmlwidget) for class use\n- create a web site for sharing class resources publicly\n- organize and a lead a help session on a topic you've mastered • other...\n- 5% Peer Review of Final Projects\n- Remarks\n- NO Piechart\n\n## Notes\n\n### 2022-09-08\n\n- [[EDAV - Continuous Variable]]\n- [[Histogram]]\n- [[ggplot2]]\n\n### 2022-09-13\n\n- [[Boxplot]]\n- [[Density Curve]]\n- [[Ridgeline]]\n\n### 2022-09-15\n\n- [[Q-Q Plot]]\n\n### 2022-09-20\n\n- [[EDAV - Categorical Data]]\n- [[Bar Chart]]\n- [[Cleveland Dot Plot]]\n- [[forcats]]\n- [[dplyr#summarise()]]\n\n### 2022-09-22\n\n- [[forcats#Lumping]]\n- [[EDAV - Dependency Relationship]]\n- [[Scatterplot]]\n- [[Heatmap]]\n- [[Density Contour Plot]]\n- [[R Package - Plotly]]\n\n### 2022-09-27\n\n- [[Scatterplot Matrix]]\n- [[tidyr]]\n- [[ggplot2#Facet]]\n- [[EDAV - Categorical Data#Combine Continuous Variables and Categorical Variables]]\n\n### 2022-09-29\n\n- [[EDAV - Multivariate Continuous Data]]\n- [[Parallel Coordinate]]\n- [[EDAV - Multivariate Categorical Data]]\n\n### 2022-10-06\n\n- [[Mosaic Plot]]\n\n### 2022-10-11\n\n- Getting Data\n- Considerations for deciding how to get data\n- Reproducibility of workflow\n- Frequency with which data is updated\n- Available formats\n- Time to process data\n- Methods\n- Dedicated [[R Package]]s, for example, `atus`\n- APIs with `httr` package\n- Web scraping\n- is the last resort\n- ❌ NOT to do\n- Against the law\n- ✅ Should do\n- think and investigate legal issues\n- think about ethical questions\n- limit bandwidth use\n- scrape only what you need\n- [[rvest]]\n- [[Mosaic Plot#Simpson's Paradox]]\n- [[EDAV - Categorical Data]]\n\n### 2022-10-13\n\n- [[Heatmap]]\n- [[Alluvial Diagram]]\n\n### 2022-10-18\n\n- [[R Package - Bookdown]]\n- [Home | Bookdown](https://bookdown.org)\n- [[Git]]/GitHub Tutorials\n- [3 Contribute to this Resource | edav dot info, 1st edition](https://jtr13.github.io/EDAV/contribute.html)\n- [Chapter 6 GitHub/git Resources | edav.info, 2nd edition](https://edav.info/github.html)\n- [Let’s Git started | Happy Git and GitHub for the useR](https://happygitwithr.com)\n- [RStudio Projects](https://r4ds.had.co.nz/workflow-projects.html)\n\n### 2022-10-20\n\n- A template in GitHub is a repo without history when you fork\n\n### 2022-10-25\n\n- [[Biplot]]\n\n### 2022-10-27\n\n- Choose Data\n- No Kaggle data\n- go to the direct source\n- No popular data\n- e.g. Yelp, Airbnb\n- *Healthy* data\n- no wrong data\n- *good-shape* data\n- balance between the number of observations and variables\n- [[Graph Color]]\n\n### 2022-11-01\n\n- For later parts, you do not need to strictly follow the proposal\n- [[Graph Color#General Tips]]\n- [[EDAV - Time Series]]\n\n### 2022-11-03\n\n- [[R Type - Date]]\n- [[lubridate]]\n- [[EDAV - Missing Data]]\n\n### 2022-11-10\n\n- [[Spatial Data]]\n- [[Choropleth]]\n- [[Geographic Coordinate]]\n\n### 2022-11-15\n\n- [[D3]]\n- [[HTML]] intro\n- [[DOM]]\n- [[CSS]] intro\n- [[SVG]]\n- SVGs, Scalable Vector Graphics, is an [[XML]]-based vector image format for defining two-dimensional graphics, having support for interactivity and animation.\n- [[JavaScript]] Intro\n- Be generally familiar with arrays, objects, functions\n- Be aware that ES6 does things differently\n- [[JS Arrow Function]]\n- [[Developer Tools]]\n\n### 2022-11-17\n\n- [[D3]]\n- [[JS Arrow Function]]\n\n### 2022-11-29\n\n- [[D3 Bind Data]]\n- [[D3 Scale]]\n- [[D3 Margin]]\n\n### 2022-12-01\n\n- Final project tips\n- The most important part: the result\n- Do not use other libraries when using [[D3]]\n- Use raw [[HTML]] in RMarkdown like it is in the `&lt;body&gt;` section\n- Share D3 Online\n- &lt;span class=&quot;alt-check alt-check-tip&quot;&gt;there are advantages to an online setup, for example, not having to set up a local server as described in the chapter on reading files.&lt;/span&gt;\n- [VizHub](https://vizhub.com/): host [[D3]] visualizations online\n- <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Bookdown</a>: include D3 code directly in a bookdown book hosted online\n- [+] everyone is in one document\n- [-] the book must be knit to view the HTML which happens quickly without R code but is still an extra step\n- Workflows\n- Include everything in the `Rmd` files using raw [[HTML]] code\n- Put [[D3]] code in a separate `js` file, and then include it using `&lt;script&gt;` tag\n- remember to include the link to the [[D3]] library first\n- you can then create an identical `html` file for testing purposes only rather than render the full bookdown book each time you would like to observe changes to your D3 code\n- Put the entire visualization ([[HTML]] and [[D3]] code) in a separate `html` file, and then include it using `&lt;iframe&gt;` tag\n- [Observable](https://observablehq.com): official D3 web tool for creating and sharing D3 code\n- [[D3 Axes]]\n- [[JS Type - Array]]\n- [[JS Function - map]]\n- [[D3 Functions]]\n- [[D3 Interactivity]]\n- [[D3 Transition]]",
		"tags": [ "note"]
},

{
		"title": "Areas",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/area/",
		"content": "🌐 Areas\nbanner16linkrelated🐍 PythonPython Functions Python Statements Python Module Python Loops Python Class🏮 宋词64词选 苏轼 辛弃疾 柳永 秦观🎲 Probability TheoryNormal Distribution Maximum Likelihood Estimation Expectation Probability Density Function Partially Observable Markov Decision Process🤖 Machine LearningDeep Learning Reinforcement Learning EDAV Linear Regression Overfitting and Underfitting🧑‍⚖️ Human Rights and Law扳道工的故事 人权的逻辑 人权内容的来源 人权的根据 人权中的平等🧮 AlgorithmBinary Search Truncated CG SGD with Momentum Satisfiability Problem Complexity Class🧠 Deep LearningDeep Feedforward Network Regularization ReLU Recurrent Neural Network NTK〽️ OptimizationTrust-Region Method Support Vector Machine Truncated CG Quasi-Newton Method Linear Programming📐 MATLABMatlab Functions List Matlab Graphics Matlab Operations Matlab Function Matlab Operator🦾 Reinforcement LearningPartially Observable Markov Decision Process Federated Reinforcement Learning FedSarsa melo2008analysisreinforcement Upper Confidence Bound📊 EDAVEDAV - Categorical Data Histogram Heatmap Scatterplot EDAV - Continuous Variable💄 CSSCSS Selector CSS Grid CSS Animation CSS Media Query CSS Color🗃️ DatabaseSQL Relational Database PostgreSQL Transaction Physical Storage Systems🌌 R4R Package R Type R Data Structure R Basics R Operator🌑 LuaLua Type Lua Basics Lua Module Lua Operator Lua Function🎛️ Control TheoryLyapunov Theorem KYP Lemma\n\n&quot;![](&quot; + banner + &quot;)&quot;\nbanner_icon +&quot; &quot;+ file.link\n\n🦾 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Reinforcement Learning</a>\n\n🤖 <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/machine-learning/\">Machine Learning</a>\n\n🤝 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Federated Reinforcement Learning</a>\n\n📊 <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav/\">EDAV</a>\n\n🧠 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Deep Learning</a>\n\n&quot;![](&quot; + banner + &quot;)&quot;\nbanner_icon +&quot; &quot;+ file.link\n\n🔐 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">SQL</a>\n\n🌌 <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>\n\n🐍 <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/python/\">Python</a>\n\n📐 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">MATLAB</a>\n\n🌑 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Lua</a>\n\n🖨️ <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">LaTeX</a>\n\n💄 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">CSS</a>\n\n&quot;![](&quot; + banner + &quot;)&quot;\nbanner_icon +&quot; &quot;+ file.link\n\n🎲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Probability Theory</a>\n\n〽️ <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Optimization</a>\n\n🤹 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">High Dimensional Probability</a>\n\n🎛️ <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Control Theory</a>\n\n&quot;![](&quot; + banner + &quot;)&quot;\nbanner_icon +&quot; &quot;+ file.link\n\n🗃️ <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/database/\">Database</a>\n\n🧮 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Algorithm</a>\n\n&quot;![](&quot; + banner + &quot;)&quot;\nbanner_icon +&quot; &quot;+ file.link\n\n🏮 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">宋词</a>\n\n🧑‍⚖️ <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/human-rights-and-law/\">Human Rights and Law</a>\n\ntable WITHOUT ID &quot;![](&quot; + banner + &quot;)&quot;, banner_icon +&quot; &quot;+ file.link\nfrom -(&quot;Banner&quot; OR &quot;~&quot;)\nwhere banner",
		"tags": [ "note"]
},

{
		"title": "Alluvial Diagram",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/alluvial-diagram/",
		"content": "Alluvial Diagram\nAlluvial diagrams take inspiration from alluvial fans.\nThey use <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/parallel-coordinate/\">Parallel Coordinate</a>s for <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-multivariate-categorical-data/\">Multivariate Categorical Data</a>.\nThey show how data move from one category to some other categories.\nAlluvial diagrams work well for data with flows in it. Observations with the same movement are drawn together to show the flow.\nSome examples of data types that are suitable for alluvial diagrams are\n\nHierarchical data\nTemporal data\n\nOther than axes, we can use colors for one variable to better visualize the patterns. The variable we choose to color should be our most interested one.\nDifferent categories in axes are called strata. Without alluviums, these strata form a relative stacked <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>.\nThe height of the strata and flows represent the size of the clusters.\nImplementation\nWe can use geom_alluvium in package ggalluvial to draw alluvial diagrams.\nlibrary(ggalluvial)\ng = ggplot(\nas.data.frame(UCBAdmissions),\naes(y = Freq, axis1 = Gender, axis2 = Dept, axis3 = Admit)\n) +\ngeom_flow(aes(fill = Gender), width = 1/12) +\ngeom_stratum(width = 1/12, fill = &quot;grey80&quot;, color = &quot;grey&quot;) +\ngeom_label(\nstat = &quot;stratum&quot;,\naes(label = after_stat(stratum))\n) +\nscale_x_discrete(expand = c(.05, .05)) +\nscale_fill_brewer(type = &quot;qual&quot;, palette = &quot;Set1&quot;) +\nggtitle(&quot;UC Berkeley admissions and rejections&quot;) +\ntheme_void()\nplot(g)\n\nAn important feature of an alluvial diagram is the consistent flow, which means an observation is a continuous curve.\nWhile we can use geom_flow to create similar diagrams, where flows may not be connected. Such diagrams are only useful if you only focus on the association between adjacent categorical variables.\n\nLodes Form\n\nAble to present ghosted data, which doesn't have all categorical variables\nNeed not specify the axes\n\nTo transform a dataframe to a lodes form, use to_lodes_form(df, axes = 1:2). It works like pivot_longer in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/tidyr/\">tidyr</a>, making one row per lode.\nAn example lodes form (corresponding to the graph below):\n## Freq alluvium x stratum\n## 1 30 1 Class1 Stats\n## 2 5 2 Class1 Math\n## 3 45 3 Class1 Stats\n## 4 20 4 Class1 Math\n## 5 30 1 Class2 French\n## 6 5 2 Class2 French\n## 7 45 3 Class2 Art\n\ndf %&gt;%\nto_lodes_form(axes = 1:2) %&gt;%\nggplot(, aes(alluvium = alluvium, x = x, stratum = stratum, y = Freq)) +\ngeom_alluvium(color = &quot;blue&quot;) +\ngeom_stratum() +\ngeom_text(stat = &quot;stratum&quot;, aes(label = paste(after_stat(stratum), &quot;\\n&quot;, after_stat(count))))",
		"tags": [ "note"]
},

{
		"title": "Bar Chart",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/bar-chart/",
		"content": "Bar Chart\nA bar chart is a chart or graph that presents <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-categorical-data/\">EDAV - Categorical Data</a> with rectangular bars with heights or lengths proportional to the values that they represent. The bars can be plotted vertically or horizontally. A vertical bar chart is sometimes called a column chart.\nOne axis of the chart shows the specific categories being compared, and the other axis represents a measured value.\nSome bar graphs present bars clustered in groups of more than one, showing the values of more than one measured variable.\n\nFor unbinned data, use geom_bar in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>\nFor binned data, use geom_col in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>\nWe can use geom_text to put labels directly in/on bars\nDo not color bars when it is not necessary. Colors are needed <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">#For Multivariate Categorical Data</a>.\n\nOrdering\nThere are <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">two typical scales</a> of a categorical variable.\nFor ordinal data, sort bars in the logical order of the categories. For example, novice -&gt; advanced -&gt; expert.\nYou can sort in either direction top &lt;-&gt; bottom, or left -&gt; right).\nFor nomial data, sort bars from highest to lowest (top -&gt; bottom, left -&gt; right).\nRebinning\nWhen plotting bar plots, rows of different categories in the same category are automatically stacked up.\nHowever, when coloring, stacked bars are colored separately.\nTo bin the data by hand, we can use <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">dplyr#summarise()</a> with group_by(category).\ndf %&gt;%\ngroup_by(Class) %&gt;%\nsummarize(Freq = sum(Freq)) %&gt;%\nggplot(aes(fct_reorder(Class, Freq, .desc = TRUE), Freq)) +\ngeom_col() +\nxlab(&quot;&quot;)\n\nFor Multivariate Categorical Data\nFor <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-multivariate-categorical-data/\">Multivariate Categorical Data</a>, instead of drawing multiple bar charts (possible with facets), we can put bars for different categories together by\n\nStacked Bar Chart\n\nBetter for the overall value\n\nGrouped Bar Chart\n\nBetter for the individual value\n\nGrouped bar charts are less used but more recommended\n\nRelative Frequency and Diverging Stacked Bar Chart\n\nLikert Data\nLikert data is a special categorical data that uses a psychometric scale commonly involved in questionnaires. For example\n\nstrongly agree\nagree\ndon’t know\ndisagree\nstrongly disagree\n\nRelative frequency stacked <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>s are used to present this kind of data.\n\nColors play an important role in presenting this kind of data: we use a neutral color to present a neutral category, and use two different sets of colors for categories on two sides.\nAnother type of <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>, diverging stacked bar charts, sometimes are more suitable. They align bars with the neutral category always in the center. By doing this, the inclination stands out. ^99cd33\n\nFurthermore, we can separate and even remove the neutral category.",
		"tags": ["For", "note"]
},

{
		"title": "Biplot",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/biplot/",
		"content": "Biplot\n\nA biplot is a generalization of the simple two-variable <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot/\">Scatterplot</a>\nA biplot overlays a score plot with a loading plot\n\nThis allows displaying information on both samples and variables\nSamples are displayed as points\nwhile variables are displayed either as\n\nvectors,\nlinear axes\nor nonlinear trajectories\n\nIn the case of categorical variables, category level points may be used to represent the levels of a categorical variable. A generalized biplot displays information on both continuous and categorical variables.\n\n[!rmk] Axis Positions\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot/\">Scatterplot</a>, <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/parallel-coordinate/\">Parallel Coordinate</a>, and biplot represent three different axis positions.\n\nLoading Plot\nWe can use dimension-reduction methods to select or form two main variables, then project other selected/formed variables to the plane (make them linear combinations of the two main variables).\nFor example, using <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Principal Components Analysis</a>, we can choose PC1 and PC2 as the two axes, and project original variables to the plane as vectors.\n\nAs <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">PCA</a> theory suggests, the first PCs should have wider angles, meaning they have higher variance. Therefore, two vectors with a small angle (or near 180 degrees) have a high correlation; and two vectors that are near perpendicular have a small correlation. We can also compare a loading plot with a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot-matrix/\">Scatterplot Matrix</a> to verify this property.\nScore Plot\nIn <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">PCA</a>, transformed data is called PC scores. Similarly, score plots present transformed samples. A biplot combines a loading plot and a score plot.\n\nElements\n\nCalibrated axis\n\nWe can draw ticks on loading vectors\n\nProjection Lines\n\nWe can project PC scores to vector lines\nto see how samples scale on certain variables\n\nImplementation\n\nredav\n\nInstall: remotes::install_github(&quot;jtr13/redav&quot;)\nUse draw_biplot()\n\noption key_axis for calibrated axis and projection lines to it\n\noption project = FALSE to disable the projection lines",
		"tags": [ "note"]
},

{
		"title": "Boxplot",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/boxplot/",
		"content": "Boxplot\nBoxplots display individual outliers and robust statistics for the data, useful for identifying outliers and for comparisons of distributions across subgroups.\n\nBoxplots follow the 5-data summary\n\nmin, first quartile/ lower hinge, median, third quartile/ upper hinge, max\n\nSometimes quartiles are different than hinges\n\nHinge\n\nThe lower hinge is the median of the lower half of the data up to the median, and including the median if and only if the median is a real data point\n\ni.e., the median is not the average of two points; i.e., the size of the data is odd\n\nThe upper hinge is the median of the upper half of the data up to the median, and including the median if and only if the median is a real data point\n\nQuartile\n\nQuartiles are special percentiles\nFor kth percentile:\n\nRank the data\nFind k% of the sample size\nIf this is an integer, add 0.5; if it isn't an integer round up\nFind the datum in this position; If your depth ends in 0.5, then take the midpoint between the two data points\n\nTherefore, the hinges are the same as the quartiles unless the remainder when dividing the sample size by 4 is 3\n\nArea != number of data points; each area contains the same number of points\n\nArea represents the density\n\nOutliers: data outside the fences\n\nfences: upper-hinge + 1.5 x H-spread, lower-hinge - 1.5 x H-spread\nH-spread/ interquartile/ forth spread: upper-hinge - lower-hinge\n\nA multiple-class boxplot should be re-ordered by the median\n\nElements\n\nBox width\n\nA disadvantage of boxplots is that they don't convey information on how big the different groups are\nSet varwidth = TRUE in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>, the width of boxes will be proportional to n\n\nExtreme outliers\n\nWe can define outer fences to be over 3 times the box length away from the box; then outliers outside outer fences are extreme outliers",
		"tags": [ "note"]
},

{
		"title": "Choropleth",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/choropleth/",
		"content": "Choropleth\nA choropleth map is a type of <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a> with units using political boundaries.\nIn a choropleth, colors usually correspond with an aggregate summary of a geographic characteristic within spatial enumeration units, such as population density or per-capita income.\n\nCompared to <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a>, choropleths have an additional variable for each unit, that is area (and shape).\nAlso, we can think of the choice of the political boundary as a meta-variable; just like in heatmaps, we can use <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">hexagons</a> or squares.\nBut for choropleths, choosing an appropriate political boundary is more important; it should be determined by the nature of the data.\nLand Area Problem\nA serious problem with choropleths is that if the data has an &quot;absolute&quot; value (not relative to the area), the choropleth can be misleading. For example, the election results always show a larger red area than blue, even though more people voted for Democrats.\n\nThere are several attempts to alleviate this problem.\nCartogram\nA cartogram distorts the area of regions in order to convey the information of an alternate variable. The region area will be inflated or deflated according to the numeric value of that variable.\nNote that the variable determining the distortion and the variable determining the color are not necessarily the same. Actually, there would be redundancy if they were the same one.\nFor example, we can use color to present the election result, and distort the cartogram according to the number of voters.\n\nAlthough the graph clarifies the possible misconception that &quot;most people voted for Trump&quot;, it makes the map almost unreadable. Two ways to address this problem\n\nUse animation to animate the distortion process\nOnly distort a part of the map while keeping other regions unchanged\n\nBoth methods keep a reference to the unchanged map, with which we can compare the distorted map.\nUniform Area\nAnother approach is to give each region the same area and shape. This eliminates the area and shape variable unique to choropleths, thus reducing them to general <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a>s.\n\nAlso, this approach doesn't convey additional information of an alternate variable like <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">#Cartogram</a>s. Therefore, this approach &quot;hides&quot; the problem rather than addresses it.\nCombination with Other Graphs\nSpatial and Temporal\nIt is common that we need to combine spatial and <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-time-series/\">temporal data</a>. To this end, we can use facets. We can either\n\nfacet on time\n\nthen each facet is a choropleth\n\nfacet on space\n\nthen each facet can be any plot presenting the temporal data\nand the facets are laid out in a grid that mimics the original geographic topology\nthis technique is also called geofacet\n\nLinked Micromaps\nWe can also use choropleths as a legend for other plots to tell where places are. These graphs are called linked micromaps. The following example is for a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/cleveland-dot-plot/\">Cleveland Dot Plot</a>\n\nImplementation\nchoroplethr\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-package/\">Package</a> choroplethr is capable of drawing state and county level maps without using shape files. The data frame must contain region and value columns, and the values of region should be recognizable by choroplethr (for example, they should be lowercase). Related functions:\n\nstate_choropleth()\ncounty_choropleth()\n\nThis function creates a US map at county level; to zoom into a state, use option county_zoom\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(choroplethr)\n\n# data frame must contain &quot;region&quot; and &quot;value&quot; columns\n\ndf_illiteracy &lt;- state.x77 %&gt;% as.data.frame() %&gt;%\nrownames_to_column(&quot;state&quot;) %&gt;%\ntransmute(region = tolower(`state`), value = Illiteracy)\n\np &lt;- state_choropleth(df_illiteracy,\ntitle = &quot;State Illiteracy Rates, 1977&quot;,\nlegend = &quot;Percent Illiterate&quot;)\nplot(p)\n\nsf and tmap\n\nsf and tmap\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-package/\">R Package</a> sf is for reading shape files (.shp). To see the read map, use function st_geometry() and plot the returned object.\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-package/\">R Package</a> tamp is for plotting maps (generated by sf) together with other data. The general workflow is\n\nGet the spatial data by reading the shape file using sf\nCombine spatial data and other data\n\ne.g. use left_join()\n\nplot the combined data using tmap",
		"tags": ["Cartogram", "note"]
},

{
		"title": "Cleveland Dot Plot",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/cleveland-dot-plot/",
		"content": "Cleveland Dot Plot\nThe Cleveland dot plot is an alternative to <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>, replacing a bar with a single dot.\n\nCleveland dot plots need to be sorted in descending order just like <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>s\n\nUse fct_reorder in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/forcats/\">forcats</a>\n\nUse geom_point in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a> to create a Cleveland dot plot\nWhen you have other variables other than the categorical variable, Cleveland dot plots can easily adopt multiple dots\n\nUse fct_reorder2 in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/forcats/\">forcats</a> to reorder dots based on one variable\n\nFacets, the reasonable cut, and other techniques for <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-categorical-data/\">EDAV - Categorical Data</a> apply to Cleveland dot plots",
		"tags": [ "note"]
},

{
		"title": "D3 Axes",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/d3-axes/",
		"content": "D3 Axes\nTo render axes in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3/\">D3</a>, we need to first generate them, and then plot them.\nThere are four axis generators called axis components:\n\n.axisTop()\n.axisBottom()\n.axisLeft()\n.axisRight()\n\nAxis components control the orientation of the axis, but not the location. All axes are rendered at the origin.\nThere are two ways to pass a scale to an axis:\n\nd3.axisBottom().scale(xScale)\nd3.axisBottom(xScale)\n\nTo plot the axis, call it on a selection, then some <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">SVG</a> elements presenting the axis will be created as a child of that selection. Also, there are two ways:\n\nd3.select(&quot;svg&quot;).append(&quot;g&quot;).call(xAxis)\nxAxis(d3.select(&quot;svg&quot;).append(&quot;g&quot;))\n\nSince all axes are rendered at the origin, we need to translate them. For example:\nconst yAxis = d3.axisLeft().scale(yScale);\nconst svg = d3.select(&quot;svg&quot;)\n\nsvg.append(&quot;g&quot;)\n.attr(&quot;class&quot;, &quot;yAxis&quot;)\n.attr(&quot;transform&quot;,\n`translate(${margin.left}, ${margin.top})`)\n.call(yAxis);\n\nTicks\nTo label the ticks, use labels when creating the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3-scale/\">D3 Scale</a>. For example, for data\nconst bardata = [{month: &quot;Jan&quot;, value: 300},\n{month: &quot;Feb&quot;, value: 100},\n{month: &quot;Mar&quot;, value: 150},\n{month: &quot;Apr&quot;, value: 220},\n{month: &quot;May&quot;, value: 70 },\n{month: &quot;Jun&quot;, value: 270}]\n\nwe can create the x ordinal scale using month,\nconst xScale = d3.scaleBand()\n.domain(bardata.map(d =&gt; d.month))\n.range([0, innerWidth])\n.paddingInner(.1);\n\nand then create y continuous scale using value. Then the axes will automatically comply with the scale.\nOr, we can add the tick values explicitly\nconst yAxis = d3.axisLeft(xScale).tickValues([1, 2, 3, 5, 8, 13, 21]);",
		"tags": [ "note"]
},

{
		"title": "D3 Bind Data",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/d3-bind-data/",
		"content": "D3 Bind Data\n\n.data(data) binds data to the selected elements\n\n.data only accepts an array of values; .data(2) will not bind the data\nif multiple elements are selected, data can be an array of values; then values will automatically match the elements\n.data() shows the data\n\n.datum(datum) binds a datum to all the selected elements\n\nevery selected element will get the same datum\nthe datum can be a scalar 2\nor it can be an array, then every selected element will get the same array\n\nBinding data to elements using d3 will not make explicit changes to the element: the data will not show up in the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/dom/\">DOM</a>.\nUpdate, Enter, Exit\n.data() will return an update, an enter, and an exit selection\n\nupdate selection contains the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/dom/\">DOM</a> elements that match the data\n\nupdate selection is stored in the _groups attribute of the return, which is the default object on which further actions will apply\n\nexit selection contains the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/dom/\">DOM</a> elements that don't find data matches\n\nexit selection is stored in the _exit attribute of the return; you can get it using method .exit()\n\nthen _groups of the return of .exit() will be the exit selection\n\nmatched element in the update selection will be empty in the exit selection\n\nenter selection contains non-existent &quot;placeholder&quot; elements for data that don't find object matches\n\nenter selection is stored in the _enter attribute of the return; you can get it using method .enter()\n\nthen _groups of the return of .enter() will be the exit selection\n\nmatched element in the update selection will be empty in the enter selection\nyou can add real elements to the placeholder elements by selection.enter().append()\n\n[!ex] Creating Elements Using Data\nSuppose we have an empty svg element and an array of data. We want to create three rectangles inside of the svg with the data.\nconst specialdata = [75, 150, 200];\n\nd3.select(&quot;svg&quot;)\n.selectAll(&quot;rect&quot;)\n.data(specialdata)\n.enter() // placeholder elements\n.append(&quot;rect&quot;) // change/append placeholder elements with rectangles\n.attr(&quot;x&quot;, d =&gt; d)\n.attr(&quot;y&quot;, d =&gt; d)\n.attr(&quot;width&quot;, &quot;50&quot;)\n.attr(&quot;height&quot;, &quot;30&quot;)\n.attr(&quot;fill&quot;, &quot;pink&quot;);\n\n[!ex] Create a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>\nlet bardata = [300, 100, 150, 225, 75, 275];\nsvg = d3.select(&quot;body&quot;)\n.append(&quot;svg&quot;)\n.attr(&quot;width&quot;, &quot;700&quot;)\n.attr(&quot;height&quot;, &quot;400&quot;);\n\nlet bars = svg.selectAll(&quot;rect&quot;)\n.data(bardata);\n\nbars.enter()\n.append(&quot;rect&quot;)\n.attr(&quot;x&quot;, 0)\n.attr(&quot;y&quot;, (d, i) =&gt; i * 25 + 10)\n.attr(&quot;width&quot;, d =&gt; d)\n.attr(&quot;height&quot;, &quot;20&quot;)\n.attr(&quot;fill&quot;, &quot;pink&quot;);\n\nMerge\nThe above examples manipulate the update, enter, and exit selection respectively.\nTo do some manipulations on the broader selection after some manipulations on some selection, we can use the .merge(other_selection) function.\nFor example:\nconst newdata = [123, 52, 232, 90, 34, 12, 189, 110];\nconst svg = d3.select(&quot;svg&quot;);\nconst circ = svg.selectAll(&quot;circle&quot;)\n.data(newdata);\n\ncirc.enter() // 2 placeholders\n.append(&quot;circle&quot;) // placeholders -&gt; circles\n.attr(&quot;cx&quot;, &quot;100&quot;) // acts on enter selection only\n.attr(&quot;cy&quot;, (d, i) =&gt; (i - 5) * 50)\n.attr(&quot;r&quot;, &quot;20&quot;)\n.attr(&quot;fill&quot;, &quot;red&quot;)\n.merge(circ) // merge circ(update) into circ.enter\n.transition()\n.duration(2000)\n.attr(&quot;cx&quot;, &quot;200&quot;);\n\nCombine with a function:\nfunction changedata(data) {\nconst bars = d3.select(&quot;svg#gup&quot;)\n.selectAll(&quot;rect&quot;)\n.data(data); // bars is the update selection\n\nbars.enter()\n.append(&quot;rect&quot;)\n.attr(&quot;x&quot;, &quot;30&quot;) // until merge, acts on\n.attr(&quot;y&quot;, (d, i) =&gt; i * 50) // enter selection only\n.attr(&quot;height&quot;, &quot;35&quot;)\n.attr(&quot;fill&quot;, &quot;lightgreen&quot;)\n.merge(bars) // merge in the update selection\n.attr(&quot;width&quot;, d =&gt; d); // acts on all bars\n\nbars.exit()\n.remove();\n}\n\nThe above function works no matter if bars.enter() or bars.exit() is empty.\nGroups\nWe can manually create groups by creating a parent element &lt;g&gt; for that group. For example:\nconst svg = d3.select(&quot;svg&quot;);\nconst specialdata = [100, 250, 300];\n\nconst bars =\nd3.select(&quot;svg&quot;)\n.append(&quot;g&quot;) // group parent element\n.attr(&quot;id&quot;, &quot;rects&quot;)\n.selectAll(&quot;rect&quot;) // rects in the group g\n.data(specialdata)\n.enter()\n.append(&quot;rect&quot;)\n.attr(&quot;x&quot;, d =&gt; d)\n.attr(&quot;y&quot;, d =&gt; d)\n.attr(&quot;width&quot;, &quot;50&quot;)\n.attr(&quot;height&quot;, &quot;30&quot;)\n.attr(&quot;fill&quot;, &quot;red&quot;);",
		"tags": [ "note"]
},

{
		"title": "D3 Functions",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/d3-functions/",
		"content": "D3 Functions\n\n.sort(array)\n.min(array)\n.max(array)\n.sum(array)\n.mean(array)\n.median(array)\n.extent(array) returns [d3.min(array), d3.max(array)]\n.variance(array)\n.deviation(array)\n.quantile(array,p) (p should be a single value)",
		"tags": [ "note"]
},

{
		"title": "D3 Interactivity",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/d3-interactivity/",
		"content": "D3 Interactivity\nInteraction contains two parts\n\nWhat do users do?\n\nevent listener\ninformation needed\n\nWhat will happen?\n\nThis note consists of many examples.\nDo Something to the Event Element\n\n.on(event, function) passes event and the selection as this/event.currentTarget to function when event is fired\n\n// A function to turn the fill color to yellow:\nfunction goYellow() {d3.select(this).attr(&quot;fill&quot;, &quot;yellow&quot;)};\n\nd3.select(&quot;svg&quot;).select(&quot;circle&quot;).on(&quot;mouseover&quot;, goYellow);\n// This in goYellow() in this call will be &quot;circle&quot;\n\n// Use an anonymous function\nd3.select(&quot;svg&quot;).select(&quot;line&quot;).on(&quot;click&quot;, function()\n{d3.select(this).attr(&quot;stroke-width&quot;, &quot;10&quot;);});\n\n// Pass the event\nd3.select(&quot;svg&quot;).on(&quot;click&quot;, function(event)\n{d3.select(&quot;text&quot;).text(`(${d3.pointer(event)})`)});\n\nDo Something Unrelated to the Event Element\nd3.select(&quot;svg&quot;)\n.on(&quot;click&quot;, function () { // a function unrelated to the event\nd3.select(&quot;svg&quot;)\n.append(&quot;text&quot;)\n.attr(&quot;x&quot;, &quot;100&quot;)\n.attr(&quot;y&quot;, &quot;40&quot;)\n.text(&quot;Hello World&quot;);\n});\n\nChange an Attribute of the Event Element\nd3.select(&quot;line&quot;)\n.on(&quot;click&quot;,function() {\nd3.select(this).attr(&quot;stroke-width&quot;,&quot;10&quot;);\n});\n\nGet the Value of an Attribute of the Event Element\nUse event.currentTarget to get the event selection.\nd3.select(&quot;circle&quot;)\n.on(&quot;click&quot;,function(event) {\nconst rad = d3.select(event.currentTarget).attr(&quot;r&quot;);\nd3.select(&quot;text&quot;)\n.text(`The radius is ${rad} pixels.`);\n});\n\n.select(this) can be used instead of .select(event.currentTarget). In the context of event handlers, this is the element that received the event, a.k.a. what you clicked on if it's a click event.\n\nDo Something with the Data\nd3.select(&quot;circle&quot;)\n.data([{s:&quot;red&quot;,sw:&quot;15&quot;}])\n.on(&quot;click&quot;,function(event, d) {\nd3.select(event.currentTarget)\n.attr(&quot;stroke&quot;, d.s) // get the data\n.attr(&quot;stroke-width&quot;, d.sw);\n});\n\nNote that starting with D3 v6, the data is the 2nd parameter to be passed: function(event, d).\n{ #7c3n0k}\n\nIn addition, note that you do not need to pass d again when accessing the data: we use d.s not d =&gt; d.s**.\n\nGet the Location of the Event\nUse .pointer(event) or d3.mouse(this) (D3 v5) to get the event/cursor location.\nd3.select(&quot;svg&quot;)\n.on(&quot;click&quot;,function(event) {\nd3.select(&quot;text&quot;)\n.text(`(${d3.pointer(event).map(Math.round)})`)\n});\n\nDo Something with the Value of a Radio Button\nA radio button with value: &lt;input type=&quot;radio&quot; value=&quot;red&quot;&gt;. The value can be directly get using this.value.\nd3.selectAll(&quot;input&quot;) // button\n.on(&quot;click&quot;, function(event) {\nconst favcolor = event.currentTarget.value;\nd3.select(&quot;p#color&quot;).style(&quot;color&quot;, favcolor);\n});",
		"tags": ["7c3n0k", "note"]
},

{
		"title": "D3 Margin",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/d3-margin/",
		"content": "D3 Margin\nTo create margins for a plot, we need to manually set the inner height and width, and then translate the graph.\n// Margin Convention\nconst w = 500;\nconst h = 400;\nconst margin = {top: 25, right: 0, bottom: 25, left: 25};\nconst innerWidth = w - margin.left - margin.right;\nconst innerHeight = h - margin.top - margin.bottom;\n\n// Add a canvas\nconst svg = d3.select(&quot;svg&quot;);\nsvg.append(&quot;rect&quot;)\n.attr(&quot;x&quot;, 0)\n.attr(&quot;y&quot;, 0)\n.attr(&quot;width&quot;, w)\n.attr(&quot;height&quot;, h)\n.attr(&quot;fill&quot;, &quot;lightblue&quot;);\n\n// Translate the content group\nconst bars = svg.append(&quot;g&quot;)\n.attr(&quot;transform&quot;,\n`translate (${margin.left},\n${margin.top})`)\n.selectAll(&quot;rect&quot;)\n.data(bardata);\n\nNote that here we use <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ES6 template literals</a>.",
		"tags": [ "note"]
},

{
		"title": "D3 Scale",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/d3-scale/",
		"content": "D3 Scale\nCartesian coordinates are different from the coordinates in an <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">SVG</a>.\n\nSo we need transformers to map Cartesian coordinates to <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">SVG</a> coordinates; scales in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3/\">D3</a> are such transformers.\nThere are two functions in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3/\">D3</a> to create scales: one for <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-categorical-data/\">Categorical Data</a>—.scaleBand(), and one for <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-continuous-variable/\">Continuous Data</a>—.scaleLinear().\nNote that these functions are for creating your own scales rather than alternating the current scales.\nOrdinal Scales\nTo create an <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ordinal</a> scale:\nconst ordScale = d3.scaleBand()\n.domain([&quot;cold&quot;, &quot;warm&quot;, &quot;hotel&quot;])\n.range([0,600])\n\n.scaleBand() evenly divide the range for each category.\nordScale.bandwidth() returns the bandwidth of the result.\nAnd ordScale(category) returns the left boundary of the category band.\n.domain() also accepts indexes of categories.\nIn this case, to make the above snippet more flexible, we can use .domain(d3.range(dataset.length)) instead of .domain([0,1,2,3,4]).\n\nDon't mix up d3.range(), which returns an <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">array</a> of integers, and .domain().range().\n{ #vga7uq}\n\nTo have some padding between bands, use .paddingInner([paddingPercent1,...]); then the padding will be .bandwidth() * paddingPercent1.\nIt won't add padding before the first band or after the last band.\nContinuous Scale\nTo create a continuous scale:\nconst yScale = d3.scaleLinear()\n.domain([-100,100])\n.range([0,500])\n\nThen yScale(-100) == 0, yScale(0) == 250, yScale(50) == 375, yScale(100) == 500.\nA more flexible pattern would be\nconst yScale = d3.scaleLinear()\n.domain([0,d3.max(data)])\n.range([svgHeight,0])\n\nThen to create a vertical bar, we can set\n\nrect.attr('y', d =&gt; yScale(d))\nrect.attr('height', d =&gt; svgHeight - yScale(d))\n\nAn Example\n// Set the size of the svg\nconst w = 400;\nconst h = 300;\n\n// Create the svg\nconst svg = d3.select(&quot;body&quot;)\n.append(&quot;svg&quot;)\n.attr(&quot;width&quot;, w)\n.attr(&quot;height&quot;, h)\n\n// Bar height\nconst bardata = [5, 6, 10, 3, 2, 12];\n\n// Ordinal x scale\nconst xScale = d3.scaleBand()\n.domain(d3.range(bardata.length))\n.range([0, w])\n.paddingInner(.1);\n\n// Continuous y scale\nconst yScale = d3.scaleLinear()\n.domain([0, d3.max(bardata)])\n.range([h, 0])\n\n// Create bars\nconst bars = svg.selectAll(&quot;rect&quot;)\n.data(bardata);\n\nbars.enter().append(&quot;rect&quot;)\n.attr(&quot;x&quot;, (d, i) =&gt; xScale(i))\n.attr(&quot;width&quot;, xScale.bandwidth())\n.attr(&quot;y&quot;, d =&gt; yScale(d))\n.attr(&quot;height&quot;, d =&gt; h - yScale(d))\n.attr(&quot;fill&quot;, &quot;lightgreen&quot;);\n\n// Add text\nsvg.selectAll(&quot;text&quot;)\n.data(bardata)\n.enter()\n.append(&quot;text&quot;)\n.attr(&quot;x&quot;, (d, i) =&gt; xScale(i) + .5*xScale.bandwidth())\n.attr(&quot;y&quot;, d =&gt; yScale(d) + 25)\n.text(d =&gt; d)\n.attr(&quot;fill&quot;, &quot;blue&quot;)\n.attr(&quot;text-anchor&quot;, &quot;middle&quot;);\n\nThe result:",
		"tags": ["vga7uq", "note"]
},

{
		"title": "D3 Transition",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/d3-transition/",
		"content": "D3 Transition\n\n.transition().duration(time) adds a transition to the change\n\ntime should be a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">number</a>; its unit is ms\nthese two methods should be between the selection and the change\n\nd3.select(&quot;svg&quot;).select(&quot;circle&quot;).transition().duration(2000).attr(&quot;cx&quot;, &quot;400&quot;)\n\nnot all changes can be added with a transition\n\n[+] changes in size and position can\n[-] changes in font family cannot\n\nwe can add multiple transitions by chaining them\n\nthen the transitions will happen one by one\nd3.select(&quot;svg&quot;).select(&quot;circle&quot;).transition().duration(2000).attr(&quot;cx&quot;, &quot;400&quot;).transition().duration(2000).attr(&quot;cy&quot;,&quot;200&quot;)\n\nDo and Not\nTransitions in different statements run simultaneously. Therefore\n\nDO\n\nRun simultaneous transitions on different selections\nRun sequential transitions on the same selection in one chain\nTransition from something to something\n\nThe attributes being transitioned should have an initial value before the transition\n\nDO NOT\n\nDo not run two transitions on the same selection at the same time\n\ni.e., in two statements/chains\n\nDo not transition from nothing to something\nDo not store a selection with a transition\n\nit is not a selection object anymore\nit becomes a Transition object\n\nDo not put a transition before a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">merge</a>",
		"tags": [ "note"]
},

{
		"title": "D3",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/d3/",
		"content": "D3\nD3.js, short for Data-Driven Documents, is a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Package</a> for manipulating documents based on data and is well suited to interactive graphics.\nIn an <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">HTML</a> file, we should add the link to D3 in the &lt;head&gt; element. And then write <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JavaScript</a> in the &lt;body&gt;.\n&lt;head&gt;\n&lt;script src=&quot;https://d3js.org/d3.v7.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;svg width=&quot;500&quot; height=&quot;300&quot;&gt; &lt;!-- some SVG --&gt;\n&lt;rect x=&quot;20&quot; y=&quot;20&quot; width=&quot;460&quot; height=&quot;260&quot; fill=&quot;lightblue&quot;&gt;&lt;/rect&gt;\n&lt;circle cx=&quot;200&quot; cy=&quot;75&quot; r=&quot;20&quot; fill=&quot;blue&quot;&gt;&lt;/circle&gt;\n&lt;ellipse cx=&quot;175&quot; cy=&quot;100&quot; rx=&quot;45&quot; ry=&quot;30&quot; fill=&quot;green&quot;&gt;&lt;/ellipse&gt;\n&lt;text x=&quot;150&quot; y=&quot;200&quot;&gt;(150, 200)&lt;/text&gt;\n&lt;line x1=&quot;250&quot; y1=&quot;150&quot; x2=&quot;300&quot; y2=&quot;200&quot; stroke=&quot;red&quot; stroke-width=&quot;5&quot;&gt;&lt;/line&gt;\n&lt;/svg&gt;\n\n&lt;script&gt;\n// JavaScript / D3 will go here\n&lt;/script&gt;\n&lt;/body&gt;\n\nD3 helps us conveniently interact with the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/dom/\">DOM</a>. Some basic commands (try them in the console of <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/developer-tools/\">Developer Tools</a>):\nd3.select(&quot;circle&quot;).attr(&quot;cx&quot;, &quot;200&quot;);\nd3.select(&quot;circle&quot;).attr(&quot;r&quot;, &quot;30&quot;);\nd3.select(&quot;circle&quot;).attr(&quot;fill&quot;, &quot;red&quot;);\n\nEffects of commands executed in the console will be gone after a refresh of the page.\n\nAs we can see, a basic D3 statement is a combination chain of D3 methods. Another example:\nd3.select(&quot;svg&quot;).select(&quot;circle&quot;).transition().duration(2000).attr(&quot;r&quot;, &quot;50&quot;);\n\nWhat the above example does is\n\nselect the first element targeted by <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">CSS Selector</a> svg circle\nchange the value of attribute r of the selected element to &quot;50&quot;\nadd a transition of 2000ms to the change\n\nSelect Elements\nSelecting elements in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/dom/\">DOM</a> is the same as targeting elements using <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">CSS Selector</a>.\n\n.select(selector) selects the first element targeted by selector\n.selectAll(selector) selects all elements targeted by selector\n\nFor a composite selector, for example, svg#id1 circle.container, we can use\n\none .select(): .select(&quot;svg#id1 circle.container&quot;);\nor chaining .select()s: .select(&quot;svg&quot;).select(&quot;#id1&quot;).select(&quot;circle&quot;).select(&quot;.container&quot;)\nThe above line is wrong: chaining selects select inside the previous selected element. So .select(&quot;svg&quot;).select(&quot;#id1&quot;) returns empty.\n\nWe can store the selected elements in a variable/constant for future reference:\nconst selection = d3.selectAll(&quot;circle&quot;)\n\nNote that once a selection is stored to a variable, even if the elements in the selection are removed from the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/dom/\">DOM</a>, the selection contains those elements.\n{ #qahtei}\n\nChange Attributes, Style, and Content\n\n.attr(attrName, attrValue) changes or sets the attribute attr of the element to attrValue\n\n.style(styleName, styleValue) changes or sets the style styleName of the element to styleValue\n\nstyle is just a special attribute; thus .style(styleName, value) is just shorthand for .attr(&quot;style&quot;, &quot;styleName: value;&quot;)\nif there is a style rule and an attribute having the same name, the style rule takes precedence\n\n.text(&quot;new content&quot;) changes or sets the tag text content\n\nto see the value of an attribute/style rule/text content, just leave the argument empty\n\nWith <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/js-function/\">JS Function</a>s, especially <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/js-arrow-function/\">JS Arrow Function</a>s, we can easily modify the values of attributes/styles/content based on the original values.\n\nIt is actually not easy to get original values! One way is to use this.getAttribute(). However, this is different in a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/js-arrow-function/\">JS Arrow Function</a> and a normal function. To make this work, we should use a normal function.\n\nAdd and Remove Elements\n\n.append(element) adds an element inside the selected element, as the last child\n\nWe can directly give the newly added element attributes, styles, and content using methods in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">#Change Attributes, Style, and Content</a>\n\nd3.select('svg').append('circle').attr('cx', '100').attr('r','30')\n\n.insert(type[, before]) adds an element inside the selected element, before the child before\n\nIf before is not specified, .insert() = .append()\nUse <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">CSS Selector#Adjacent Sibling Selector</a> before + *, the element is inserted after the child before\n\nAfter .append() or .insert(), the selection will be the new element.\n\n.remove() removes the selected element\n\nIf the selector targets multiple elements, .select(selector).remove() will only remove the first element\nUse .selectAll(selector).remove() to remove all the elements targeted by selector\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3-bind-data/\">D3 Bind Data</a>\nData Function\nD3 is powerful for manipulating documents based on data. Now we've learned how to bind data to elements; then we can manipulate these elements based on their data.\nAll the DOM manipulation methods introduced in previous sections, such as .attr(), .style(), .text(), .append(), etc., not only can take in a constant value, but also accepts a function as a parameter. This function is a function of data. The method will call the function using the bound data. To be exact, these parameters will be passed to the function\n\nfirst argument d: data bound to the element\nsecond argument i: index of the element\n\nNote that the selection will also be passed to the function as this\n\nThen we can easily manipulate the elements based on their data using <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/js-arrow-function/\">JS Arrow Function</a>s as the functions of data. For example, to set the x-position of a circle to its data value:\nd3.select(&quot;circle&quot;).attr(&quot;cx&quot;, d =&gt; d)\n// This is short for\nd3.select(&quot;circle&quot;).attr(&quot;cx&quot;, function(d) {return d})",
		"tags": ["qahtei", "Change", "note"]
},

{
		"title": "DOM",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/dom/",
		"content": "DOM\nThe Document Object Model (DOM) is a cross-platform and language-independent interface that treats an <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">XML</a> or <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">HTML</a> document as a tree structure wherein each node is an object representing a part of the document.\nDOM and <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">HTML</a>\nWhen you use a web browser to request a page like https://example.com the server returns HTML like this:\n&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Hello, world!&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Hello, world!&lt;/h1&gt;\n&lt;p&gt;This is a hypertext document on the World Wide Web.&lt;/p&gt;\n&lt;script src=&quot;/script.js&quot; async&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nThe browser parses the HTML and creates a tree of objects like this:\nhtml\nhead\ntitle\nbody\nh1\np\nscript\n\nThis tree of objects, or nodes, representing the page's content is called the DOM. Right now it looks the same as the HTML, but suppose that the script referenced at the bottom of the HTML runs this code:\nconst h1 = document.querySelector('h1');\nh1.parentElement.removeChild(h1);\nconst p = document.createElement('p');\np.textContent = 'Wildcard!';\ndocument.body.appendChild(p);\n\nThat code removes the h1 node and adds another p node to the DOM. The complete DOM now looks like this:\nhtml\nhead\ntitle\nbody\np\nscript\np\n\nThe page's HTML is now different from its DOM. In other words, HTML represents initial page content, and the DOM represents current page content. When <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JavaScript</a> adds, removes, or edits nodes, the DOM becomes different than the HTML.\nSee Introduction to the DOM to learn more.",
		"tags": [ "note"]
},

{
		"title": "Database",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/database/",
		"content": "Database\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Database Cheatsheet</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Database Last Minute</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Database Database</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Database Intro</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Relational Database</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">E-R Model</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Relational Database Design</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">SQL</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Formal Relational Query Language</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Relational Algebra</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Tuple Relational Calculus</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Domain Relational Calculus</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Physical Storage Systems</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">File Organization</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Database Indexing</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Query Processing</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Transaction</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Concurrency Control</a>\nRelational Database Management System\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">PostgreSQL</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">SQL Server</a>\n\nProject\n\nDesign a book sales management system Designed the <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Salt Library</a>\n\nTo add\n\nConferences\n\nSIGMOD/PODS\nVLDB\nICDE\nDASFAA\nDEXA\nEDBT\nICDT\nNDBC\n\nJournals\n\nKDD\nSIGIR\nCIKM\nPAKDD\n\nArchive\n## Syllabus\n\n* [x] 第1周：数据库简介；关系数据库模型（数据库模式、键、模式图）；关系数据库模型（关系查询语言、关系操作）\n* [x] 第2周：SQL简介（SQL数据定义、SQL查询基本结构、集合操作、空值、聚集函数、嵌套子查询）；中级SQL（连接表达、视图、事务、完整性约束）；高级SQL（函数与过程、触发器）\n* [x] 第3周：形式化查询语言（关系代数）；第三节形式化查询语言（元组关系算子）\n* [x] 第4周：数据库设计与E-R模型（实体-关系模型、约束）；数据库设计与E-R模型（E-R图、模式约简）；数据库设计与E-R模型（E-R设计）\n* [x] 第5周：关系数据库设计（原子域与1NF、函数依赖）；关系数据库设计\n（BCNF）\n* [x] 第6周：关系数据库设计（3NF）；关系数据库设计（多值依赖、关系分解）；关系数据库设计（4NF、数据库设计过程与方法）\n* [x] 第7周：数据存储与文件系统（RAID、文件系统、记录的组织、数据库缓\n存）；索引与哈希（有序索引、B+树索引文件、多键值访问）\n* [x] 第8周：索引与哈希（静态哈希、动态哈希）；索引与哈希（位图索引）\n* [x] 第9周：查询处理（查询代价）；查询处理（选择操作）；查询处理（排序操作）\n* [x] 第10周：查询处理（连接等操作）；查询处理（查询表达式赋值）\n* [x] 第11周：查询优化（关系表达式转换）；查询优化（表达式结果的估计统计）；查询优化（查询计划的选择）\n* [x] 第12周：事务（事务的概念）；事务（ACID性质）；事务（序列化）\n* [x] 第13周：并发控制（基于锁的协议）；并发控制（死锁处理）；并发控制（多粒度锁）\n* [x] 第14周：并发控制（基于时间戳的协议）；并发控制（多版本模式）；并发控制（快照隔离）\n* [x] 第15周：系统恢复（失效分类）；系统恢复（恢复的原子性）\n* [x] 第16周：系统恢复（恢复算法、缓存管理）；系统恢复（缓存管理）",
		"tags": [ "note"]
},

{
		"title": "Density Contour Plot",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/density-contour-plot/",
		"content": "Density Contour Plot\nDensity contour lines are two-dimensional <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-curve/\">Density Curve</a>s. So the relationship between density contour lines and <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a>s is like that between <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-curve/\">Density Curve</a>s and <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/histogram/\">Histogram</a>s.\n\nDensity contour plots use kernel density estimates to calculate the curves.\n\nThe &quot;number of bins&quot; in a density contour plot is the number of lines\nWhen using facets, watch out for the boundaries\n\nclustered points may be separated into two facets, causing wrong density estimates for two facets\n\nImplementation\n\nkde2d in package MASS\n\nlibrary(GDAdata)\nlibrary(MASS)\nf1 &lt;- kde2d(SpeedSki$Year, SpeedSki$Speed, n = 100)\nimage(f1)\ncontour(f1, add = T)\n\ngeom_density_2d()  and geom_density_2d_filled() in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>\n\nlibrary(GDAdata)\nggplot(SpeedSki, aes(Year, Speed)) +\ngeom_density_2d() +\ngeom_density_2d_filled(alpha = 0.7)\n\nCalculate using kde2d, plot with geom_contour in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>\n\nggplot(con2tr(f1, aes(x, y)) + geom_contour(aes(z = z))\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Scatterplot#Smooth Scatterplot</a>",
		"tags": [ "note"]
},

{
		"title": "Density Curve",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/density-curve/",
		"content": "Density Curve\nIn <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Probability Theory</a>, a density curve is a function that describes how a random variable is distributed. It is a smooth curve that shows how often each value of the random variable occurs.\nIn <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav/\">EDAV</a>, a density curve for some data is the density curve of any distribution that approximates the data empirical distribution.\nA common technique is to give each point a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Normal Distribution</a> with mean equal to its value. Then the density curve is the composition of multiple normal distributions.\n\nThen the variance of the normal distribution, which can be seen as binwidth in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/histogram/\">Histogram</a>, controls the shape of the curve.\n\nIf the variance is too small, then the <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Normal Distribution</a> becomes a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Dirac Distribution</a>, and the composite density curve becomes too sharp\nIf the variance is too large, then the <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Normal Distribution</a> becomes a constant, and the composite density curve becomes too flat\n\nIn real implementations, such variance is controlled by parameter bandwidth h.\n\nSometimes due to the x-axis limits, the density curve doesn't go to zero at two ends (see the last graph above). We can expand the x-axis limits in such cases.",
		"tags": [ "note"]
},

{
		"title": "Developer Tools",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/developer-tools/",
		"content": "Developer Tools\n\n[c] DevTools of Microsoft Edge\n\nDevTools is a set of web developer tools built directly into the browser.\nDevTools is available on major browsers like Chrome, Edge, and Safari.\n\n[!tip] Open the DevTools\n\non <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Windows</a>: Ctrl + Shift + C or Ctrl + Shift + I\non <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">macOS</a>: Command + Option + C or Command + Option + I\n\n[!impt] Applications\nFor useful applications, see the Application section.\n\nConsole\nThis panel is related to <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JavaScript</a>\n\nMessages generated by console.log() function will be logged to Console\nThe Console is also a REPL: you can run <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JavaScript</a> in the Console to interact with the page that you're inspecting\nYou can open Console in the Drawer\n\nDrawer is a pane at the bottom of the DevTools that can be opened and closed by Esc\nTherefore you can access Console in any tab\n\nIn Console, you can reference the currently-selected node with $0\n\nWhen you inspect a node, the == $0 text will appear next to the node\n\nSource\nThe Source panel is like a lightweight IDE where you can debug <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JavaScript</a>. It consists of three panes\n\nFile Navigator\nCode Editor\nJavaScript Debugging\n\n[!impt]\nFor the full Debug JavaScript - Chrome Developers\n\nElements\n\nThis panel is related to <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">HTML</a> and <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">CSS</a>\nOn the left top corner, there is a inspect button for you to select any <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">HTML Element</a> in the page ①\nThe main pane shows the DOM of the page ②\n\nYou can directly edit its <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">HTML</a> source code there\n\nYou can also drag the nodes to reorder them\n\nYou can use the keyboard to navigate in the DOM\nYou can right click on a node and click Scroll into view to sync it with the viewport\nYou can find any node by Ctrl + F\nYou can hide a node by selecting it and pressing H\n\nChoose an <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">HTML Element</a>, all its <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">CSS</a> styles appear in the Styles side pane\n\nAll styles including inline CSS\nThe source of every set of rules will appear in the right top corner ③\nYou can insert, edit, enable, and disable any rules\nYou can add inline CSS rules in the top element style ④\nYou can toggle element's states through the :hov button ⑤\nYou can add classes to the element through the .cls button ⑥\n\nAnd the Computed side pane will show all the rules applied to the element\n\n&quot;computed&quot; means rules link inherit and initial will be replaced by the computed values\nClick on each rule so you can see the uncomputed value and source, and go to the original rule set\nCheck Show all to show all the rules the element implicitly inherits\nCheck Group to group rules into different categories\n\nBoth in Styles and Computed tabs, there is a box model diagram showing the element's size, padding, border, and margin\n\nYou can directly edit these properties by double clicking the values\n\nCoverage\nThe Coverage tab shows you what CSS a page actually uses.\n\nIn Command Menu run the Show Coverage command to enable the Coverage tab\nClick the Refresh button (at the position of the red dot in the above figure) to reload the page and see the coverage info\nTeal represents the used proportion; Red represents the unused proportion\nClick any file (URL) to see a line-by-line breakdown of what code it uses\n\n#E In the above figure, CSS rules from lines 6 to 9 are applied, while other rules in the figure are not applied\n\nCommand Menu\nIn DevTools, there is a feature called the command menu that is similar to the **command palette in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">VSCode</a>.\n\nCtrl + Shift + P to open the command menu when DevTools is focused\nPrompt &gt; means &quot;run command&quot;, there are other prompts for other actions\n\nNo prompt: open file\n@: go to symbol\n:: go to line\n!: run snippet\n\nApplication\nPrint Mode\nTo view a page in print mode:\n\nOpen the Command Menu\nRun command Emulate CSS print media type\n\nOr start typing Rendering and select Show Rendering\nFor the Emulate CSS Media dropdown, select print\n\nDevice Mode\n\nClick button ① to open the UI that enables you to simulate a mobile viewport\nBy default, the Device Toolbar opens in Responsive Viewport Mode ②\n\nYou can change to other modes from the device list ③\nTo show media query breakpoints above your viewport, click More options and then select Show media queries\n\nYou can show <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">CSS Media Query</a>s ⑤ in the more options menu ④\n\nClick a media query breakpoint to change the viewport's width so that the breakpoint gets triggered\n\n[!tip]\nFor the complete reference see Simulate mobile devices with Device Mode - Chrome Developers",
		"tags": ["E", "note"]
},

{
		"title": "Categorical Data",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/edav-categorical-data/",
		"content": "Categorical Data\nCategorical data is a type of data that can be divided into groups or categories.\nGraphs\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>\n\nsince the bars in a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a> always have the same width, you compare lengths, not areas, which is much easier\n\nPie Chart\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/cleveland-dot-plot/\">Cleveland Dot Plot</a>\n\n[!rmk] Points vs Areas\nThere are suggestions for using individual points (not the same as <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/cleveland-dot-plot/\">Cleveland Dot Plot</a>) for cases and jittering to keep them apart. This does not work well for high-frequency groups, as it is hard to assess their densities, and the displays for low-frequency groups may exhibit non-existent patterns due to the random jittering.\nNevertheless, as always with exploratory graphics, if a graphic helps to uncover information, it is worth using.\n\nOrdinal vs Nominal\nNominal Scale and Ordinal Scale are two typical categorical variable measurement scales.\n\nNominal Scale is derived from the Latin word &quot;nomalis&quot; which denotes &quot;related to names&quot;. Variables of nominal scale have names, but usually do not have a natural order\n\ngender, race\n\nOrdinal Scale involves arranging information in a specific order\n\nrank, age\n\nDiscrete Data\nThough not strictly categorical, when a variable has discrete values and the range is small, we can regard it as a categorical variable.\nIn this case, a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a> is the same as a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/histogram/\">Histogram</a> if each bin in the histogram contains only one value.\n\nFeatures\n\nUnexpected patterns\n\nThere may be many more of some categories than others\nSome categories may be missing completely\n\nUneven distributions\n\nObservational studies may exhibit some form of bias\n\ntoo many males\nIn medical meta-analyses, many trials are analyzed together, although it can turn out that most of the trials were small and that the results are dominated by one or two major trials\n\nExtra categories\n\nGender may be recorded as ‘M’ and ‘F’, but also as ‘m’ and ‘f’, ‘male’ and ‘female’\nIn a study of patients with two medical conditions, there may be some patients diagnosed with a third condition\n\nUnbalanced experiments\n\nAlthough experiments are usually carefully designed and carried out, there is always the chance that some data are missing or unusable\nIt is important to know if this occurs and leads to unequal group sizes\n\nLarge numbers of categories\nDon’t knows, refusals, errors, missings, ...\n\nData may not be available for a wide variety of reasons, and plots summarising how many cases of each type have arisen can be helpful both in deciding how to handle the data and in properly qualifying the results from the data that are available\nOpinion polls\n\nFacets\nSometimes categories can be further divided into different groups, with different scales. We can use <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">facets</a> w/ different scales if needed. See <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2#^32e6e9</a> for code. However usually, we should not use different scales in a plot.\nTop/Bottom-Coded Data\nWhen there are too many categories to present, we can combine top/bottom categories into a &quot;or more&quot; category. However, the &quot;or more&quot; category may contain too much data to be considered &quot;or more&quot;. So when a smart cut is needed. For example, when two bars are similar, it's not reasonable to cut them; you should look for a &quot;jump&quot; instead.\nData Formats\n\ncases\n\nw/o counts\n\ncounts (Freq)\ncontingency/pivot table\n\nEx: Favorite\nAge bubble gum coffee\nold 2 4\nyoung 7 1\n\nConversions:\n\nFrom \\ To\ncases\ncounts\ntable\n\ncases\n-\nas.data.frame(table()) or group_by() %&gt;% summarise(Freq = n())\ntable()\n\ncounts\nlink\n-\nxtabs()\n\ntable\nlink\nas.data.frame()\n-\n\nLikert Data\nLikert data is a special categorical data that uses a psychometric scale commonly involved in questionnaires. For example\n\nstrongly agree\nagree\ndon’t know\ndisagree\nstrongly disagree\n\nRelative frequency stacked <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>s are used to present this kind of data.\n\nColors play an important role in presenting this kind of data: we use a neutral color to present a neutral category, and use two different sets of colors for categories on two sides.\nAnother type of <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>, diverging stacked bar charts, sometimes are more suitable. They align bars with the neutral category always in the center. By doing this, the inclination stands out.\n\nFurthermore, we can separate and even remove the neutral category.\nCombine Continuous Variables and Categorical Variables\nWhen combining <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-continuous-variable/\">Continuous Variable</a>s and <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-categorical-data/\">Categorical Variable</a>s, we should consider\n\nmapping options:\n\nContinuous: x-axis, y-axis, color (not so great), size (not so great)\nCategorical: color, facets (rows, columns), shape (maybe)\n\nAdd one variable at a time\nCreate more graphs if suitable options run out\nSwitch options to test",
		"tags": [ "note"]
},

{
		"title": "EDAV - Continuous Variable",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/edav-continuous-variable/",
		"content": "Continuous Variable\nA continuous variable can in theory take any value over its range, as opposed to a discrete variable.\n\nThe real world is discrete: in practice data for continuous variables are generally rounded to some level of measurement accuracy.\n\nFeatures of Continuous Variables\n\nAsymmetry\n\nthe distribution may not be symmetric like <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Normal Distribution</a>\nthe distribution may be skewed to the left or right\n\nA distribution is called skewed left/negative if, as in the distribution graph, the left tail (smaller values) is much longer than the right tail (larger values)\nA distribution is called skewed right/positive if, as in the distribution graph, the right tail (larger values) is much longer than the left tail (smaller values)\n\ndistributions of income\n\nOutliers\n\nthere may be data far from the rest of the data\n\nMultimodality\n\nthe distribution may have more than one peak\nthe mode is the value that appears most often in a set of data values\n\nFor a discrete <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Random Variable</a>, the mode is \\argmaxkP(X=k)\nFor a continuous <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Random Variable</a>, the mode is the local maxima of the <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">PDF</a>\n\nGaps\n\nThere may be ranges of values within the data where no cases are recorded\n\nHeaping\n\nsome values may occur unexpectedly often\n\nRounding\n\nOnly certain round values (like integers) are found\n\nErrors/Impossibilities\n\nDifferent graphs emphasize different features.\nGraphs\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/histogram/\">Histogram</a>\n\nasymmetry\nmultimodality\ngaps\nheaping\nrounding\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/boxplot/\">Boxplot</a>\n\noutliers\nstatistics\n❌ multimodality\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-curve/\">Density Curve</a>\n\ndistribution\nasymmetry\nmultimodality\n❌ gaps\n❌ heaping\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/ridgeline/\">Ridgeline</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>\n\ngaps, heaping\ntreating discrete values as <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-categorical-data/\">Categorical Data</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/cleveland-dot-plot/\">Cleveland Dot Plot</a>\n\ngaps\n[-] heaping\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/q-q-plot/\">Q-Q Plot</a>\n\ndistribution\nasymmetry\nmultimodality\n\nCombine Continuous Variables and Categorical Variables\n\nCombine Continuous Variables and Categorical Variables\nWhen combining <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-continuous-variable/\">Continuous Variable</a>s and <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-categorical-data/\">Categorical Variable</a>s, we should consider\n\nmapping options:\n\nContinuous: x-axis, y-axis, color (not so great), size (not so great)\nCategorical: color, facets (rows, columns), shape (maybe)\n\nAdd one variable at a time\nCreate more graphs if suitable options run out\nSwitch options to test",
		"tags": [ "note"]
},

{
		"title": "Dependency Relationship",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/edav-dependency-relationship/",
		"content": "Dependency Relationship\nWhen we focus on two <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-multivariate-continuous-data/\">continuous variables</a>, we want to find out how they relate, is one variable dependent on the other?\nGraphs\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot/\">Scatterplot</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-contour-plot/\">Density Contour Plot</a>\n\nFeatures\n\nFeatures\n\nCausal relationships\n\ncorrelation ≠ causation, but we still use the y-axis for what appears to be the dependent variable\n\nAssociations\n\ndescribe what you see\n\nOutliers\nClusters\nGaps\nBarriers (boundaries)\nConditional relationships\n\ndifferent relationships for different intervals of x",
		"tags": [ "note"]
},

{
		"title": "EDAV - Missing Data",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/edav-missing-data/",
		"content": "Missing Data\nThis note is about visualizing the missing data and its patterns, but not analyzing or complementing the missing data.\nRow/Column Missing Patterns\n\nDo all rows/columns have the same percentage of missing values?\n\nUsually, in practice, different rows/columns have different percentages of missing values\n\nAre there correlations between missing rows/columns?\n\nStrong correlation: if a value is missing in one column it is likely to be missing in another column\n\nVisualization\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a>s are suitable for visualizing missing data.\nFirst, use <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/tidyr/\">tidyr</a> to convert column names into one variable. Then plot a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a> with the x-axis being column names (variable name), the y-axis being row names (observation id), and the color indicating missing values.\nAn example:\nlibrary(tidyverse)\nset.seed(5702)\nmycars &lt;- mtcars\nmycars[,&quot;gear&quot;] &lt;- NA\nmycars[10:20, 3:5] &lt;- NA\nfor (i in 1:10) mycars[sample(32,1), sample(11,1)] &lt;- NA\n\ntidycars &lt;- mycars %&gt;%\nrownames_to_column(&quot;id&quot;) %&gt;%\ngather(key, value, -id) %&gt;%\nmutate(missing = ifelse(is.na(value), &quot;yes&quot;, &quot;no&quot;))\n\nggplot(tidycars, aes(x = key, y = fct_rev(id), fill = missing)) +\ngeom_tile(color = &quot;white&quot;) +\nggtitle(&quot;mtcars with NAs added&quot;) +\nylab('') +\nscale_fill_viridis_d() + # discrete scale\ntheme_bw()\n\nA better idea is to combine the normal <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a> with missing data: use one color to present missing data, and a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">sequential color palette</a> to present the magnitude of other values.\n\nTo better explore the patterns (the combination of columns missing), we can sort column names by the number of missing.\n\nplot_missing()\nFunction plot_missing() from <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-package/\">R Package</a> redav is a powerful tool to explore missing patterns. It renders graphs like this\n\nThe top part shows the number of missing values in each column\nThe middle part presents the missing patterns\n\nrepeated missing patterns are reduced to one row\n\nThe right part shows the counts for each missing pattern (consecutive missing values)\nYou can also show the percentage in the top/right graphs by setting percentage = True.\n\nValue Missing Patterns\n\nAre missing patterns correlated with values of another variable?\nAre certain value ranges more likely to be missing?\n\nA pattern according to package mi is a subset of variables. So there are total 2n possible variables, and each observation has one pattern (if it has all values, then the pattern is &quot;nothing&quot;).\nlibrary(mi)\nx &lt;- mi::missing_data.frame(mycars)\nsummary(x@patterns)",
		"tags": [ "note"]
},

{
		"title": "EDAV - Multivariate Categorical Data",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/edav-multivariate-categorical-data/",
		"content": "EDAV - Multivariate Categorical Data\nWhen creating a graph for multivariate categorical data, we don't want multiple graphs for each categorical variable. Instead, we want to see the magnitude of phenomena (counts, frequency, etc.) in the multivariate combinations of categorical variables.\n\nGraphs\nTo highlight different aspects of data in different categories, we can use\n\nFrequency\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>\n\nStacked bars\nGrouped bars\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/cleveland-dot-plot/\">Cleveland Dot Plot</a>\n\nmultiple dots\nfacets\n\nProportion / Association\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/mosaic-plot/\">Mosaic Plot</a>\n\nChange of State\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/alluvial-diagram/\">Alluvial Diagram</a>",
		"tags": [ "note"]
},

{
		"title": "EDAV - Multivariate Continuous Data",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/edav-multivariate-continuous-data/",
		"content": "Multivariate Continuous Data\nGraphs\n\nTwo continuous variables\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot/\">Scatterplot</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-contour-plot/\">Density Contour Plot</a>\n\nThree continuous variables\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot-matrix/\">Scatterplot Matrix</a>\n3D <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot/\">Scatterplot</a> (interactive)\n\nMore\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot-matrix/\">Scatterplot Matrix</a>\n\nNot conveying the multivariate structure but only pair-wise relationships\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/parallel-coordinate/\">Parallel Coordinate</a>\n\nWhen manipulating dataframes with multivariate categorical data, remember to transform values into numerics (continuous).",
		"tags": [ "note"]
},

{
		"title": "EDAV - Time Series",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/edav-time-series/",
		"content": "Time Series\nA time series is a sequence of data points, typically consisting of successive measurements made over a time interval. Visualizing time series data helps extract meaningful statistics and other characteristics of the data.\n\nWhen presenting time series data, use lines with time on the x-axis\nUse Date and Date-Time <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-type/\">R classes</a> for time series\n\nLong-Term Trend\nTime series graphs are good for exploring overall long-term trends (secular).\nTime series are essentially discrete data and have short-term noise. We can add a loess smoother to fit the data.\n\nIn the above example, the blue curve is a global non-parametric smoother, while the red segments are linear smoothers constrained to specific time windows (groups). We can see that the smoothers eliminate the short-term noise (e.g. intra-weekly oscillations) and present the long-term trend.\nAdd a smoother using <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>: geom_smooth(method = &quot;loess&quot;, span = .75, se = FALSE)\n\nChoose the right parameters for smoothers to avoid <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Overfitting and Underfitting</a>. Small span tends to overfit; while large span tends to underfit.\n{ #4j85jk}\n\n[!rmk] Rolling Average vs Smoother\nA rolling average and a smoother are alike, but they are not the same thing. A rolling average is fitting a constant instead of a line. Therefore, there are more jumps in a rolling average. Rolling averages only aggregate the previous information and do not capture future information.\n\nRemove Cyclical Trends\nIn addition to smoothers, there are some other methods to eliminate the noise of short-term cyclical trends. The key idea is to extract a certain point in the cycle, and show the trend of this point among all cycles. For example, when there is a weekly cyclical trend, we can focus on the trend of Monday data. To achieve this, we can\n\nHighlight/label Monday data points\nFacet by weekdays\nUse special functions like monthplot\n\nAbnormalities\nAbnormalities and outliers may violate the trend. To find the abnormalities, we can\n\nUse another feature/variable, which may be the cause of abnormalities, to label the data\nHighlight the abnormality\n\nCompare Multiple Lines\nWhen using raw data to plot a multi-line plot, some lines will dominate others. To only compare the trends instead of values, we can scale the data using\nyi′=100⋅yiy1.Gaps\nLine plots do not show the frequency of the data, and may hide gaps. We can add additional points to show the frequency.\n\nTo explicitly show the gap, we can set missing values to NA (do not remove them).\nAnother option is to use facets.",
		"tags": ["4j85jk", "note"]
},

{
		"title": "Geographic Coordinate",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/geographic-coordinate/",
		"content": "Geographic Coordinate\nGeographic coordinate uses latitude and longitude to locate a position.\nLatitude and longitude are just like x-y axes, so you can build all kinds of graphs with them, like <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot/\">Scatterplot</a> and <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-contour-plot/\">Density Contour Plot</a>.\n\nIn a geographic coordinate, latitude comes first. But it is the north-south direction. Therefore, there is a cross between lat-long and x-y coordinates.\n{ #5kd68p}\n\nThere are also some special graphs for geographic coordinate system, but with controversial performance, like\n\n[-] Radius Map: use a circle with a radius dependent on an additional variable to represent a dot\n[-] Push Pin Map: use a push pin icon to represent a dot\n\nImplementation\nggmap\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-package/\">Package</a> ggmap can generate real-world maps. It is compatible with <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>, so you can easily add layers on top of the base map. Related functions:\n\nget_stamenmap: get a US map\n\ncan be zoomed using option bbox, zoom, and the latitude-longitude range of the area\n\nget_googlemap: get the map of the specified latitude-longitude range from Google map\nggmap: render the map\n\nsf and tmap\n\nsf and tmap\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-package/\">R Package</a> sf is for reading shape files (.shp). To see the read map, use function st_geometry() and plot the returned object.\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-package/\">R Package</a> tamp is for plotting maps (generated by sf) together with other data. The general workflow is\n\nGet the spatial data by reading the shape file using sf\nCombine spatial data and other data\n\ne.g. use left_join()\n\nplot the combined data using tmap",
		"tags": ["5kd68p", "note"]
},

{
		"title": "Git Commands",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/git-commands/",
		"content": "Git Commands\nAdd\n\ngit add -A stages all changes\n\n= git add . + git add -u\n\ngit add . stages new files and modifications, without deletions (on the current directory and its subdirectories)\n\nFor Git &gt;= 2.0, git add . will add deletions! Use flag --ignore-removal to ignore deletion\nTherefore, git add -A is redundant for Git &gt;= 2.0\n\ngit add -u stages modifications and deletions, without new files\n\nCombine add and commit\ngit commit -am &quot;commit message&quot;\n\nis equal to\ngit add -u\ngit commit -m &quot;commit message&quot;\n\nAlias\ngit config --global alias.ac &quot;commit -am&quot;\ngit ac &quot;commit message&quot;\n\nis equal to\ngit commit -am &quot;commit message&quot;\n\nBranch\n# Create a branch\ngit branch -M main\n# Rename a branch\ngit branch -M master main\n\nLog in Terminal\nTo get better log info like in the GUI\ngit log --graph --oneline --decorate\n\nStash\nstash store your changes without commit, remove them now, and pop out when you need them again\n# Store all your changes without commit, and hide them\ngit stash\n# Pop out your hidden changes\ngit stash pop\n# Stash your changes with a given name\ngit stash save &quot;your stash name&quot;\n# Show all your stashes\ngit stash list\n# Apply a certain stash in the list\ngit stash apply index\n\nIgnore\nTo ignore some files or directories, add them to the .gitignore file. However, this will not work for files/dirs that have already been tracking. To remove those files/dirs from git tracking (not delete them), use\ngit rm -r --cached path_to_file_or_dir\n\nNew Branch\n# Create a new branch called new_branch\ngit branch new_branch\n# Checkout (switch) to the new branch\ngit checkout new_branch\n\nThese two commands have a shorthand:\ngit checkout -b new_branch\n\nDiscard Branch\nWhen a branch is pulled/merged into main, it is no longer needed.\ngit branch -d patch # delete branch\ngit fetch -p # stop tracking obsolete remote branches (prune)\n\nRemotes\n# View the remotes\ngit remote -v\n# Add a remote called origin\ngit remote add origin git@github.com:zcysxy/repo.git\n# Change the url of the remote origin\ngit remote set-url origin https://github.com/zcysxy/repo.git\n\nWhen forking an other's repo, remember to add the other's repo as an upstream repo.\ngit remote add upstream git@github.com:yiyi/repo.git\n\n[!rmk] Forking and Making Pull Requests Best Practice\n\nSet the original repo as the upstream repo.\nSwitch to a new branch before making any changes.\nMake a pull request from a new branch other than main/master.\nAfter the pull request is merged into the original repo, pull it into your own main/master branch.\nDelete the obsolete branch. git branch -D obsolete-branch\n\nDiscard Changes\n# Restore several files\ngit restore file1 file2 file3\n\n# Restore all\ngit restore .\n\nGet Files from Other Branches\nTo get files from other branches, you can either use checkout command or restore command.\n# main branch\ngit checkout other_branch -- file1 file2\n# or\ngit restore --source other_branch -- file1 file2\n\nShow Tracked Files\nList all the files currently being tracked under the branch master\ngit ls-tree -r master --name-only\n\nRemote Status\nTo show what's going on in the remote branches, you need to fetch/update them first, then compare the differences.\n# Method 1\ngit fetch origin\ngit diff origin/master\ngit merge origin/master\n\n# Method2\ngit remote update\ngit status\n\nList Files\nls-files\ngit ls-files # Show information about files in the index and the working tree\n[-c|--cached] [-d|--deleted] [-o|--others] [-i|--|ignored]\n[-s|--stage] [-u|--unmerged] [-k|--|killed] [-m|--modified]\n[--directory [--no-empty-directory]] [--eol]\n[--deduplicate]\n[-x &lt;pattern&gt;|--exclude=&lt;pattern&gt;]\n[-X &lt;file&gt;|--exclude-from=&lt;file&gt;]\n[--exclude-per-directory=&lt;file&gt;]\n[--exclude-standard]\n[--error-unmatch] [--with-tree=&lt;tree-ish&gt;]\n[--full-name] [--recurse-submodules]\n[--abbrev[=&lt;n&gt;]] [--] [&lt;file&gt;…​]\n\nls-tree\ngit ls-tree -r main --name-only\n\n[!tip] ls-tree &gt; ls-files\nls-tree is better than ls-files because ls-files may differ from the --work-tree.\n\nGarbage Collection\nTo &quot;collect the garbage&quot; in the .git folder and reduce its size, use\ngit gc\n# or spend more time optimizing using\ngit gc --aggressive\n\nThis command actually executes a bundle of other internal subcommands like git prune, git repack, git pack and git rerere. These subcommands identify any Git objects that are outside the threshold levels set from the git gc configuration, and then compress, or prune them accordingly.\nGlobal .gitignore\nYou can create a global .gitignore file to ignore files for all git repositories. When you created that file, run the following command\ngit config --global core.excludesfile &lt;path_to_your_gitignore_global&gt;\n\nSeparate Git Directory\nSometimes, you don't want the .git directory to be in the same directory as the working tree (for example, to prevent sync issues).\ncd ~/work/dir # working dir\ngit init –separate-git-dir ~/work/dir.git # git dir in the parent dir\n\nMerge Changes from Another Branch\n# In branch main\ngit merge patch_branch\n# or merge from a specific commit\ngit cherry-pick commit-hash\n\nCompare Current and Last Version\n# HEAD~n is the nth generation ancestor of the named commit object (HEAD here)\ngit diff HEAD~1 HEAD\n# Shortcuts\ngit diff HEAD~ HEAD\ngit diff HEAD~\ngit diff @~ # @ is an alias for HEAD\ngit show # doesn't work for merge commit\n\nSee Commit Log Between Tags\ngit log [tag_num]..HEAD &gt; changelog.md",
		"tags": [ "note"]
},

{
		"title": "Git",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/git/",
		"content": "Git\n\nGit is an implementation of version control (remember that it's not Git that invented the concept of version control)\nGit focuses on plain text files\nGit allows you to\n\nrevert selected files back to a previous state\nrevert the entire project back to a previous state\ncompare changes over time\nsee who last modified something that might be causing a problem\n\nVersion Control\n\nVCS (Version Control System) is any system that records changes (the history) of a file/ set of file that helps you understand how it has progressed\n\nsaving a file is a simplified version control system, which only allows you to move forward\n\nHistory\n\nLocal VCS\n\nkeep patch sets (differences) in a local database\n\nCentralized VCS\n\nkeep versioned files in a single center server\n\nDistributed VCS\n\nAll clients don't just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history\nEvery clone is really a full backup of all the data\n\nGit vs Other VCS\n\nSnapshots vs Delta-Based VC\n\nDelta(difference)-based:\n\nSnapshots:\n\nNearly Every Operation In Git In Local\n\nHence Git is super fast\n\nIntegrity by Hash\n\nGit stores everything in its database not by file name but by the hash value of its contents\nGit uses checksum to guarantee integrity\n\nGit Generally Only Adds Data\n\nWe can experiment without the danger of severely screwing things up\n\nConcepts\nThree States\n\nModified: changed the file but have not committed it to your database yet\nStaged: marked a modified file in its current version to go into your next commit snapshot\n*\n\nadd take changes into the control of git\n\nCommitted: the data is safely stored in your local database\n\nCommit\nSomeone make some changes, then they commit to annotate the history of changes. Once committed, a &quot;snapshot&quot; was taken of the differences made to the system at a given point in time.\n\nPush &amp; Pull\nWhen collaborating (even with yourself), you may want to host a remote repository (repository is just a folder of your project) that can accessed by anyone. Push is just submitting your commits (changes with annotations) to the remote; while pull is the opposite.\n\nBranches\nIn a large collaborating project, you may have different lines of work that have different focus and progress. Then you create branches, which leave the main (used to called master 😆) branch at some point and will eventually merge to the main branch.\nIn essence, when a branch gets merged into master, its commits get added to the top of the master history.\n\nOther\n\nclone fully copy a repository, including all the history\n\nadd take changes into the control of git\n\nfetch get the changes from other repo but without automatically merging them\n\nmerge accept the fetched changes\n\npull request a GitHub tool that allows users to easily see the changes (the difference or &quot;diff&quot;) that a feature branch is proposing as well as discuss any tweaks that said branch might require before it is merged into master\n\nstash temporarily commit\n\nUsage\nUpdate\n\nOn <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Linux</a>\n\nsudo add-apt-repository ppa:git-core/ppa\nsudo apt update\nsudo apt install git\n\nConfiguration\n\nUser name and email\n\ngit config --global user.name &quot;Your Name&quot;\ngit config --global user.email &quot;yourname@example.com&quot;\n\nSet the default branch to match the default branch name of GitHub (main)\n\ngit config --global init.defaultBranch main\n\nSSH Management\n\nGenerate an SSH key for the first time\n\nssh-keygen -C &quot;hello@gmail.com&quot;\n\nRead and read the SSH key\n\ncat ~/.ssh/id_rsa.pub | clip.exe\n\nclip.exe is only available on WSL, use xclip on other Linux systems, use pbcopy on <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">macOS</a>\n\nGo to GitHub to add the SSH key\nTest the key (for GitHub)\n\nssh -T git@github.com\n\nWhen first run, it will ask you to add a host to known hosts, type yes\n\nWorkflow\n\n# Initialize a repo\ngit init\n# Clone a repo\ngit clone &lt;repo_url&gt;\n# Stage all changes in the **directory**\ngit add .\n# Stage all changes in the **repository**\ngit add -A\n# Commit\ngit commit -m &quot;commit message&quot;\n# Check status\ngit status\n# Push\ngit push [-u origin main]\n# See history\ngit log\n\n[!rmk]\n\norigin is the remote name\nmain is the brach name",
		"tags": [ "note"]
},

{
		"title": "Graph Color",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/graph-color/",
		"content": "Graph Color\nLink Between Data And Color\nMatch data types to color palettes/schemes\n\nSequential\n\nsuitable for ordinal variables\neasy to tell the level of a color\ne.g. <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a>\n\nDiverging\n\nsuitable for <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Likert Data</a>\nable to divide colors into groups\n\nQualitative\n\nsuitable for <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-categorical-data/\">Categorical Data</a>\nThere should not be some colors that stand out more than other colors\n\nUnless you are stressing certain values\n\nPerceptually Uniform Color Spaces\nWe want to perceive the difference between data by observing colors.\n\nDistinctions In Data\n\nThe rate of color change should be consistent\n\nThis is also required by perceptually uniformness\n[-] Color scheme rainbow is not perceptually uniform\n\nLarge range\n\nthe color range should be large enough to help distinguish differences\n\nSharp break at important thresholds\n\nWith ggplot2\n\nContinuous data\n\nscheme function: +scale_color_viridis_c() (c for continuous)\npalette option: +scale_color_distiller(palette = &quot;PuBu&quot;)\nown sequential: +scale_color_gradient(low=&quot;white&quot;, hight=&quot;red&quot;)\nown diverging: +scale_color_gradient2(low=&quot;blue&quot;, mid=&quot;white&quot;, hight=&quot;red&quot;)\n\nDiscrete data\n\nscheme function: +scale_color_viridis_d() (d for discrete)\npalette option: +scale_color_brewer(palette = &quot;PuBu&quot;)\nown: +scale_color_manual(values=c(&quot;red&quot;, &quot;yellow&quot;, &quot;#FFFFFF&quot;)\n\nThe color in the above scales can be fill for scaling the fill variable\ncontinuous vs discrete: c vs v, distiller vs brewer, gradient vs manual\n{ #v99m26}\n\nWith Other Packages\nlibrary(RColorBrewer)\ncolors &lt;- brew.pal(4, &quot;Reds&quot;) # get the color codes\nbarplot(1:4, col = colors)\n\nColor Vision Deficiency\nTo make color vision deficiency (CVD) friendly graphs,\n\nUse palettes that have already been tested\n\nviridis, scale_color_colorblind() in ggthemes\n\nUse a color vision deficiency simulator\n\nColor Oracle\n\nUse high contrast\n\nGeneral Tips\n\nBe consistent with colors\n\nthe color of the same object should be consistent among different graphs\nmanually set up the color if needed\n\nLegend order matches graph order\n\nIf your legend is on the right, it better matches the right ends of the graph\ntry label instead of legend\nfor some plots, like <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Plot</a>, legends at the bottom may be better\n\nSequential scheme for <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-continuous-variable/\">Continuous Data</a>; qualitative scheme for <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-categorical-data/\">Categorical Data</a>\nDo not use diverging scheme for non-likert data\nColors should be a separate dimension\n\nif a variable is already presented along the x-axis, there is no need to color the variable",
		"tags": ["v99m26", "note"]
},

{
		"title": "Heatmap",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/heatmap/",
		"content": "Heatmap\nHow does a heatmap work:\n\nHeatmaps can be seen as two-dimensional <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/histogram/\">Histogram</a>s. Therefore, <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">bin width</a> is also an important element for heatmaps.\nIn <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>, use geom_bin2d() to create a heatmap.\nHex Heatmap\nRather than using squares, hex heatmaps use hexagons. Hexagons are more compact, provide more accurate information, and make more natural transitions. In <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>, use geom_hex to create hex heatmaps.\n\nUnfixed Shapes\nWhen using unfixed shapes, we can think of heatmaps as colored <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-contour-plot/\">Density Contour Plot</a>s. This kind of heatmaps is widely used for geographic patterns and thermal patterns.\n\nChanging Colors\nColors in heatmaps show the magnitudes of the phenomenon (cluster). An example to change the color: scale_fill_continuous(low = &quot;grey&quot;, high = &quot;purple&quot;)\nThree Variables\nThe color can not only represent the magnitude of the cluster, but it can also represent a third variable. By doing this, heatmaps are no longer restricted to <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-continuous-variable/\">Continuous Variable</a>s, but can also be for <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-categorical-data/\">categorical</a>.\nFor three variables, we cannot use geom_bin2d anymore. Some choices in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a> are\n\ngeom_tile: plots a dot as a tile, with specified width and height\n\nuse color = white to add white borders to the tiles\n\ngeom_rect: plots a dot as a rectangle, with specified xmin,xmax,ymin,ymax\n\nRectangles can be squares with coord_fixed()\n\ngeom_raster: same as geom_tile w/ uniform width and height, and is faster\n\nThe above functions only plot the tiles without colors. Use aes(fill = z) to fill the colors according to variable z.",
		"tags": [ "note"]
},

{
		"title": "Histogram",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/histogram/",
		"content": "Histogram\nA histogram is a graph grouping data into intervals, and drawing a bar for each interval, shows the empirical distribution\n\nIt's a discrete distribution, where events are intervals but not values\n\nFor example, the frequency histogram of data 50, 51, 53, 55, 56, 60, 65, 65, 68 with binwidth = 5.\n\nElements\n\nBoundaries\n\nSpecify the boundaries to eliminate the confusion\nYou can choose boundaries to be NON-round numbers, to make sure no data lie on the boundaries\n\nBin width\n\nChoose the right bin width to better present the data\n\nthin width will provide more details, but may not be necessary and give gaps\n\nthin bins are useful for looking for gaps and heaping\n\nwide width will wipe out much information\n\nChanging the bin width can help discover the rounding pattern\nUneven bin widths\n\nWhen using uneven bin widths, use a density histogram\n\nTypes\nIn a histogram, the x-axis is the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-continuous-variable/\">Continuous Variable</a> to be inspected. And Different y-scales give types of histograms.\n\nFrequency histogram\nDensity histogram\n\nIn a density histogram, the area of a bar equals the relative frequency; thus the y-scale is the density: relative frequency/binwidth\n\nIn <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>, use y = ..density.. to specify this scale\n\nIt is also very useful to overlay a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-curve/\">Density Curve</a> (geom_density())\n\nCumulative frequency histogram\n\nis suitable when some frequencies are small to present",
		"tags": [ "note"]
},

{
		"title": "Human Rights and Law",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/human-rights-and-law/",
		"content": "Human Rights and Laws\n书\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">《政府论》下篇</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Leviathan</a>\n作业\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权保障的意义</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">扳道工的故事</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">自由的困境</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">平等的难题</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">权利与义务思考</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">《政府论》下篇 读书报告</a>\nForum\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">权利的实质</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权与人性需求</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">化悲痛为法律</a>\n\n笔记\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">《政府论》导读</a>\n第一讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权与法导论</a>\n第二讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权的概念</a>\n第三讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权的思想史</a>\n四至六讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权的本原问题</a>\n\n第四讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权内容的来源</a>\n第五讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权的逻辑</a>\n第六讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权的根据</a>\n\n第七讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权是普遍价值吗？</a>\n第八讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权中的自由</a>\n第九讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权中的平等</a>\n第十讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权中的正义</a>\n第十一至十三讲 与人权理论对立的理论\n\n第十一讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权与主权</a>\n第十二讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">权利与功利</a>\n第十三讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">权利与义务</a>\n\n第十四讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权的限制与协调发展</a>\n第十五讲 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权保障的条件和方式</a>\n结语 <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权与法课程结语</a>\n\n讨论课\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">HR&amp;L课堂讨论2020-10-31</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">HR&amp;L小组讨论2020-11-11</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">HR&amp;L课堂讨论2020-12-5</a>\n\n文献笔记\n第一讲 导论\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">International Human Rights Law</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Universal Declaration of Human Rights</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">International Covenant on Civil and Political Rights</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">International Covenant on Economic, Social and Cultural Rights</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">中华人民共和国宪法第二章</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">作为历史文献的《世界人权宣言》</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权概念在联合国的发展</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">张彭春和世界人权宣言</a>\n\n第二讲 人权的概念\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权概念反思</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权是什么意义上的权利</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权概念的普遍性</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权主体之争引出的几个理论问题</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权主体界说</a> <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">!todo#A</a>\n\n第四讲至第六讲 人权的本原问题\n\n康德.法的形而上学原理——权利的科学\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">当代伦理学前沿探索中的人权边界</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权如何得到确证</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">重构人权的道德基础</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">现代人权理论的宗教哲学渊源</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">权利的法律与道德根基</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">人权的本性与价值位阶</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">论人权的人性基础</a>\n\n第八讲 人权中的自由\n\n古代人的自由与现代人的自由\n伯林.两种自由的概念\n\n第九讲至第十讲 平等与正义\n\nA Theory of Justice\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">John Rawls</a> 的生平与思想（唐丰鹤整理）\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">一个精致的正义论体系——罗尔斯《正义论》中译版序言</a> <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">!todo#A</a>\n\n第十一讲 人权与主权\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">全球主义与国家主义</a>\n\n第十二讲 功利与权利\n\n道德与立法原理导论\n\n第十三讲 权利与义务\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">评社群主义对自由主义的理论挑战</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">认真对待社群主义式的人权论证</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">正义还是德性</a>",
		"tags": [ "note"]
},

{
		"title": "JS Array Function",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/js-arrow-function/",
		"content": "JS Array Function\nAnother way to create a function and assign it to a variable (this process is called <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">#Function Expression</a>) is called arrow function, which is similar to <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Lambda Function</a>\nlet myFun = (para1, para2) =&gt; expression\n\nThis creates a function myFun that accepts arguments para1 and para2, then evaluates the expression on the right side with their use and returns its result.\nIn other words, it’s the shorter version of the <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">#Function Expression</a>:\nlet myFun = function(para1, para2) {\nreturn expression;\n};\n\nIf we have only one parameter, then parentheses around parameters can be omitted\n\nThis gives the simplest form of a function: para =&gt; expression\n\nIf there are no parameters, parentheses will be empty (but they should be present)\nFor more complex expressions, like multiple expressions or statements, we should enclose them in curly braces {}, then use a normal return within them\n\n[!ex] Dynamically Create a Function\nlet age = prompt(&quot;What is your age?&quot;, 18);\n\nlet welcome = (age &lt; 18) ?\n() =&gt; alert('Hello') :\n() =&gt; alert(&quot;Greetings!&quot;);\n\nwelcome();",
		"tags": ["Function", "Function", "note"]
},

{
		"title": "JS Functions",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/js-function/",
		"content": "JS Functions\n\n[!tip] Built-in Functions\nThe JavaScript language has many built-in functions. In fact, some of the code you are calling when you invoke a built-in browser function couldn't be written in JavaScript — many of these functions are calling parts of the background browser code, which is written largely in low-level system languages like C++, not web languages like JavaScript.\nAnd some built-in browser functions are not part of the core JavaScript language — some are defined as part of browser APIs, which build on top of the default language to provide even more functionality.\n\nDefinition\nUse function <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Keyword</a> to define a function\nfunction myFunction(arg1, arg2) {\ndoSomeOperations;\nlet result = expression;\nreturn result;\n}\n\nReturn\n\nFunctions without return <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Keyword</a>/statement return <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Types - undefined</a>\nJust like <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Type#typeof</a>, return is both a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/js-function/\">JS Function</a> and a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Operator</a>\n\nThis means there are two forms of syntax\n\nreturn x;\nreturn(x);\n\nreturn terminate the function: the remaining code in the function definition after return will not be executed\n\nSuch code are unreachable\n\nIt is possible to use return without a value, which simply exits the function\n\nIn this case the function also returns <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Types - undefined</a>\n\n#R Never add a newline between return and the value\n\nSee <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Basics#^js-semicolon-newline</a>\nIf we want the returned expression to wrap across multiple lines\n\nWe can start it at the same line as return\nOr we can wrap them with parentheses and put the opening parentheses at the same line as return\n\nInvoking\nUnlike <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/python/\">Python</a>, where functions must be defined before any invoking; and unlike <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">MATLAB</a>, where functions must be listed at the end of the script; JS allows to define the functions anywhere and invoke them anywhere.\nDefault values\nIf a function is called, but an argument is not provided, then the corresponding value becomes <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Types - undefined</a>. However, we can provide its default value in the function definition\nfunction myFun(para1, para2 = &quot;no text given&quot;) {\nconsole.log(para1 + para2);\n}\n\nmyFun(&quot;Notice: &quot;); // 'Notice: no text given'\n\nNow if the para2 parameter is not passed, it will get the value 'no text given'. The default value can even be another function call.\n#R If the default value is an expression or function, it will and only will be evaluated when the function is called and the respective parameter is not passed.\n\n[!tip] Alternative Default Parameters\nSometimes it makes sense to assign default values for parameters not in the function declaration, but at a later stage. In these cases we can check if the parameter is passed during the function execution, by comparing it with undefined\nfunction showMessage(text) {\n// ...\n\nif (text === undefined) { // if the parameter is missing\ntext = 'empty message';\n}\n\nalert(text);\n}\n\nshowMessage(); // empty message\n\nOr we could use the Or we could use the||and??<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">logical operator</a>s Or we could use the\nfunction showMessage(text) {\n// if text is undefined or otherwise falsy, set it to 'empty'\ntext = text || 'empty';\n//...\n}\nfunction showCount(count) {\n// if count is undefined or null, show &quot;unknown&quot;\nalert(count ?? &quot;unknown&quot;);\n}\n\nshowCount(0); // 0\nshowCount(null); // unknown\nshowCount(); // unknown\n\nArguments\nWithin every function, there is an <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Type - Array</a>-like <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Types - Object</a> called arguments that contains the values of the arguments passed to that function.\n\nThe arguments object is not an <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Type - Array</a>: it lacks all Array properties and methods except length and property access []\n\nAnonymous Function\nWhen we don't need to store a function in a name, we can define an anonymous function\nfunction() {\n// Do something\n}\n\nYou generally use an anonymous function along with an event handler, for example the following would run the code inside the function whenever the associated button is clicked:\nconst myButton = document.querySelector('button');\n\nmyButton.onclick = function() {\nalert('hello');\n}\n\nWith event handler, anonymous function is like a when statement: it executes some code when an event is triggered.\nFunction Expression\nJust like any other type, an anonymous function can be assigned to a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Variable</a>. Such form of creating a function is also known as function expression.\n/* Define */\nlet varFun = function() {\n// Do somethinf\n};\n\n/* Invoke */\nvarFun();\n\nYou need a the parenthesis () to execute the function\n\nOtherwise you just mention the function without causing its execution\n\n#E typeof varFun won't execute the function\n\nBut unlike general function declaration, function expressions are not hoisted\n\ni.e. the <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Variable</a> (function) need to be assigned first before being invoked.\n\nAnd just like general <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Variable</a>s, you can also assign the function to be the value of multiple variables\n\n[!ex] Callback Functions\nfunction ask(question, yes, no) {\nif (confirm(question)) yes()\nelse no();\n}\n\nfunction showOk() {\nalert( &quot;You agreed.&quot; );\n}\n\nfunction showCancel() {\nalert( &quot;You canceled the execution.&quot; );\n}\n\n// usage: functions showOk, showCancel are passed as arguments to ask\nask(&quot;Do you agree?&quot;, showOk, showCancel);\n\nThe arguments showOk and showCancel of ask are called callback functions or just callbacks.\nThe idea is that we pass a function and expect it to be &quot;called back&quot; later if necessary. In our case, showOk becomes the callback for “yes” answer, and showCancel for “no” answer.\nWe can use Function Expressions to write the same function much shorter:\nfunction ask(question, yes, no) {\nif (confirm(question)) yes()\nelse no();\n}\n\nask(\n&quot;Do you agree?&quot;,\nfunction() { alert(&quot;You agreed.&quot;); },\nfunction() { alert(&quot;You canceled the execution.&quot;); }\n);\n\n[!tip] A Function is a Value Representing an &quot;Action&quot;\nRegular values like strings or numbers represent the data. A function can be perceived as an action. We can pass it between variables and run when we want.\n\nArrow Function\n\n$\nn-h1\n\nJS Array Function\nAnother way to create a function and assign it to a variable (this process is called <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">#Function Expression</a>) is called arrow function, which is similar to <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Lambda Function</a>\nlet myFun = (para1, para2) =&gt; expression\n\nThis creates a function myFun that accepts arguments para1 and para2, then evaluates the expression on the right side with their use and returns its result.\nIn other words, it’s the shorter version of the <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">#Function Expression</a>:\nlet myFun = function(para1, para2) {\nreturn expression;\n};\n\nIf we have only one parameter, then parentheses around parameters can be omitted\n\nThis gives the simplest form of a function: para =&gt; expression\n\nIf there are no parameters, parentheses will be empty (but they should be present)\nFor more complex expressions, like multiple expressions or statements, we should enclose them in curly braces {}, then use a normal return within them\n\n[!ex] Dynamically Create a Function\nlet age = prompt(&quot;What is your age?&quot;, 18);\n\nlet welcome = (age &lt; 18) ?\n() =&gt; alert('Hello') :\n() =&gt; alert(&quot;Greetings!&quot;);\n\nwelcome();\n\nFunction Scope\n\nFunctions have their own local scope, in which variables and nested functions cannot be accessed from outside\n\nEverything in the global scope can be accessed anywhere\n\nFunctions have full control of global variables, meaning that they can even modify their values and the modification is preserved\nlet a = 1;\nfunction modify() {\na = 'hello';\n}\nconsole.log(a); // 1\nmodify();\nconsole.log(a); // 'hello'\n\nIf a same-named variable is declared inside the function then it shadows the outer one\nlet a = 1;\nfunction shadow() {\nlet a = 'hello';\nconsole.log(a);\na = 'world';\n}\nshadow(); // 'hello'\nconsole.log(a); // 1\n\nThis also means that you can re-declare a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Variable</a> in the local scope of a function\n\nParameters are declared\n\nSo you can directly use parameters in the function declaration without re-declaring them\n\nParameters are local\n\nArguments passed to the function are assign to parameters, thus the variables being passed will stay intact, unless they are explicitly modified in the function\n\nlet a = 1;\nfunction intact(a) {\nconsole.log(typeof a);\na += 10; // Here a is the local one\n}\nintact(); // 'undefined', but no error\nintact(a); // 'number', since 1 is passed to it\nconsole.log(a);",
		"tags": ["R", "R", "E", "Function", "Function", "note"]
},

{
		"title": "Machine Learning",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/machine-learning/",
		"content": "Machine Learning\nDefinition\nMachine Learning\n: A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E\n\n[r] Michell, Machine Learning 1997\n\nFrom a scientific and philosophical point of view, machine learning is interesting because developing our understanding of machine learning entails developing our understanding of the principles that underlie intelligence\n\nTask T\nML tasks are usually described in terms of how the ML system should process an example.\nAn example is a collection of features that have been quantitatively measured from some object or event that we want the ML system to process. We typically represent an example as a vector x∈Rn where each entry xi of the vector is an feature.\n\nThe features of an image are usually the values of the pixels in the image.\n\nMost common ML tasks:\n\nClassification\nClassification with missing inputs\n\nWhen some of the inputs may be missing, the learning algorithm must learn a set of functions, each corresponding to classifying x with a different subset of its inputs missing\nWith n input variables, we can now obtain all 2^n^ different classification functions needed for each possible set of missing inputs, but we only need to learn a single function describing the joint probability distribution\n\nRegression\nStructured output\n\nTranscription\nMachine translation\n\nAnomaly detection\nSynthesis and sampling\nImputation of missing values\nDenoising\nDensity estimation or probability mass function estimation\n\nProbability distribution estimated can be used to solve other tasks, such as the missing value imputation task\n\nPerformance Measure P\nIn order to evaluate the abilities of a machine learning algorithm, we must design a quantitative measure of its performance. Usually this performance measure P is specific to the task T being carried out by the system.\nMost common performance measures:\n\nAccuracy or error rate: classification, structured output\naverage log-probability (i.e. <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Cross-Entropy</a>) the model assigns to some examples: density estimation\n\nUsually we are interested in how well the machine learning algorithm performs on data that it has not seen before. We therefore evaluate these performance measures using a test set of data that is separate from the data used for training the machine learning system.\nExperience E\nThe experience of most ML algorithms is the dataset, a collection of many examples/data points, and an example is a collection of features.\nML algorithms can be broadly categorized as <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Unsupervised Learning</a> or <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Supervised Learning</a> by what kind of experience they are allowed to have during the learning process.\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Unsupervised Learning</a>\n\nlearn useful properties of the structure of this dataset\nExamples: density estimation, synthesis, denoising, clustering\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Supervised Learning</a>\n\neach example is also associated with a label/target\nExample: classification, regression, structured output\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Semi-Supervised Learning</a>\n\n[!ex] Blurry line between UL and SL\nThe chain rule of probability states that for a vector x∈Rn, the joint distribution can be decomposed as\np(x)=∏i=1np(xi∣x1,…,xi−1)This decomposition means that we can solve the ostensibly unsupervised problem of modeling p(x) by splitting it into n SL problems.\nAlternatively we can solve the SL problem of learning p(y|x) by applying UL to learn the joint distribution p(x,y) and inferring\np(y∣x)=p(x,y)∑y′p(x,y′)\nDescribing a Dataset\n\nMatrix - a different example in each row, a different feature in each column\n\nRequires that every example has the same features vectors of the same size\nWith a label vector in SL\n\nSet - examples as elements\n\nMethods\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Supervised Learning</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Regression</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Linear Regression</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Logistic Regression</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ridge regression</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">LASSO</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Classification</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Linear Classifier</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Nearest Neighbor</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Support Vector Machine</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Deep Learning</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Decision Tree</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Random Forest</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Ensemble Learning</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Unsupervised Learning</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Meta-Learning</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Unsupervised Learning</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Semi-Supervised Learning</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Reinforcement Learning</a>\n\nGeneral Concepts &amp; Techniques\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Mercer Kernel</a> &amp; <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Reproducing Kernel Hilbert Space</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Dimensionality Deduction</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Overfitting and Underfitting</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Hyperparameter</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Cross-Validation</a>\nEstimation\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Estimation &amp; Bias</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Maximum Likelihood Estimation</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Bayesian Statistics</a>\n\nCourse Log\n2023-01-17\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Supervised Learning</a>\n\nTwo tasks\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Regression</a>: Using a set of inputs, predict real-valued output\nClassification: Using a set of inputs, predict a discrete label (aka class)\n\nTools\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Deep Learning</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Unsupervised Learning</a>\n\nTask: uncover the structure in the data\n\nNO correct answer; no supervise\n\nApplications\n\npredictions\nrecommendations\nefficient data exploration\n\nLearn the dominant topics from a set of news articles.\n\nA probabilistic model is a set of probability distributions, p(x|θ)\n\ngraph TD\nB[0. Build Model] --> C[2. Infer hidden variables]\nA[1. Data] --Optimization--> C\nC --> D[3. Predict & Explore]\nA --Supervise--> D\nDifferences between <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Supervised Learning</a> and <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Unsupervised Learning</a> mainly lie in blocks 1 and 3\nDifferences between probabilistic and non-probabilistic approaches mainly lie in blocks 0 and 2\n\n[!ex] Gaussian Distribution\nWe want to estimate the distribution of some data.\n\nBlock 0. We assume it is a multivariate Gaussian distribution\nBlock 1. Sample data\nBlock 2. Maximum Likelihood Estimation\nBlock 3. Predict the properties of the whole dataset\n\n2023-01-19\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Linear Regression</a>\n\n2023-01-24\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Ridge Regression</a>\n\n2023-01-26\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Bias-Variance Trade-Off in Regression</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Cross-Validation</a>\n\n2023-01-31\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Maximum a Posteriori</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Bayesian Linear Regression</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Active Learning</a>\n\n2023-02-02\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Underdetermined Linear System</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">LASSO</a>\n\n2023-02-07\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Classification</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Nearest Neighbor</a>\n\nStatistical Learning\n\nHow to find an accurate regression function/ classifier?\nKey assumption: data (feature and label) are i.i.d. from a distribution, then the past should look like the future\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Generative vs Discriminative Model</a>\n\n2023-02-09\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Linear Classifier</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Perceptron Algorithm</a>\n\n2023-02-14\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Logistic Regression</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Bayesian Logistic Regression</a>\n\n2023-02-016\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Feature Map</a>, <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Mercer Kernel</a>, and <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Mercer's Theorem</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Gaussian Process Regression</a>\n\n2023-02-21/23\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Support Vector Machine</a>\n\n2023-02-28\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Decision Tree</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Ensemble Learning</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Bootstrap</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Random Forest</a>\n\n2023-03-2\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Boosting</a>\n\n2023-03-21\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Unsupervised Learning</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Clustering</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">K-Means</a>\n\n2023-03-23\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Expectation Maximization</a>\n\n2023-03-28\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Clustering</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">K-Means#Soft (Weighted) K-Means</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Gaussian Mixture Model</a>\n\n2023-03-30\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Matrix Factorization</a>\n\n2023-04-04\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Topic Modeling</a>\n\n2023-04-06\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Principal Components Analysis</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Probabilistic PCA</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Kernel PCA</a>\n\n2023-04-11\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Markov Chain</a>\n\n2023-04-13\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Hidden Markov Model</a>\n\n2023-04-18\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Kalman Filter</a>\n\n2023-04-20\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Association Analysis</a>",
		"tags": [ "note"]
},

{
		"title": "Mosaic Plot",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/mosaic-plot/",
		"content": "Mosaic Plot\nA mosaic plot is a filled rectangular plot (no white space) with consistent numbers of rows and columns, in which the area of each small rectangle is proportional to the frequency count for a unique combination of levels of the categorical variables displayed.\n\nMosaic plots are like stacked <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>s, except that the width and height of the bars are proportional to the amount of data.\nMosaic plots are not treemaps, which are another type of filled rectangular plots representing hierarchical data (fill color does not necessarily represent frequency count)\nMosaic plots with only one horizontal cut (variable) are called spine plots, where vertical cuts are called spines\nMosaic plots with the same bin width are relative frequency stacked <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>s\n\nAll bars sum up to 100%, thus have the same height\n\nYou can not read the actual values in a mosaic plot, but you can inspect the association. As we can see from the above example, we can relatively confident in concluding that the older one is, the higher probability of them being a follower.\nThe steeper the stairs, the stronger the relationship.\nMore Variables\nMosaic plots are powerful for presenting <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-multivariate-categorical-data/\">Multivariate Categorical Data</a>. We can put multiple variables on the x-axis and y-axis. The most important problem is cutting the variables.\n\nAs in the above example, we put variables\n\nInfl and Type on the x-axis\n\nWe first cut on Type, and in each Type, we cut on Infl\n\nCont and Sat on the y-axis\n\nWe first cut on Cont, and in each Cont, we cut on Sat\n\nMosaic Pairs Plot\nJust like <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot-matrix/\">Scatterplot Matrix</a>, we can make mosaic plot matrix, with each element being a spine plot with two variables. Then for n variables, we need an n×n matrix. A diagonal elements is a vertical proportion cut of one variable.\n\nBest Practices\n\nThe order of cuts\n\nSplit dependent variables last\n\nDirection of cuts\n\nSplit dependent variables horizontally\n3 vars: VVH\n4 vars: VVVH\n5 vars: VHVVH\n\nColor fill is set to a dependent variable\n\nUse color to stress the relationship\n\nvs.\n\nThe most important level of the dependent variable is the closest to the x-axis and with the most noticeable shade\n\nImplementation\n\ngeom_mosaic in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>\nmosaic() in package vcd\n\nmosaic(Music ~ Age, data = counts3, direction = c(&quot;v&quot;, &quot;h&quot;))\n\nmosaic(Music ~ Age + Favorite, data = counts3, direction = c(&quot;v&quot;, &quot;v&quot;, &quot;h&quot;))\n\nHere <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">R Type - Formula</a> can be read as &quot;on&quot;, especially for dependent variables\n\nThere should be a Freq column in the date, which is a standard column in a dataframe\n\nuse vcd::labelings functions to\n\nabbreviate labels using option abbreviate_labs = c(FALSE, 3, 6)\nrotate labels using option rot_labels = c(0,0,0,0)\nadjust variable names using option set_varnames = c('name1', 'name2')\n\nuse vcd::spacings functions to adjust the spacing between factor levels\n\nSimpson's Paradox\nSimpson's paradox is a phenomenon in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Probability Theory</a> and <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Statistics</a> in which a trend appears in several groups of data but disappears or reverses when the groups are combined.\nAn example of Simpson's paradox is <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">A Plausible Treatment Test</a>.\nA visual example of Simpson's paradox:\n==&gt;\nMosaic plots can help eliminate Simpson's paradox:",
		"tags": [ "note"]
},

{
		"title": "Parallel Coordinate",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/parallel-coordinate/",
		"content": "Parallel Coordinate\nInstead of making coordinates orthogonal, we can make them parallel to adapt more than 3 coordinates/variables. Just like line charts, parallel coordinate plots are for <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-multivariate-continuous-data/\">EDAV - Multivariate Continuous Data</a>.\nSlope Graph\nWhen there are only two parallel coordinates, the graph is called a slope graph.\n\nTo make the patterns in a slope graph more obvious, we can apply some data transformation\n\nStandardization: (x - mean(x)) / sd(x)\nRescaling (to [0,1]): scales::rescale()\n\nA drawback of these transformations is that we lose the actual units. A remedy is to label the units on each axis.\nMore Variables\nWe can use ggparcoord in GGally to create parallel coordinate plots.\n\nscale = &quot;std&quot; (standardization) is the default scale\nscale = &quot;uniminmax&quot; is rescaling\nscale = &quot;globalminmax&quot; is the scale without transformation\n\nOther methods to reveal the patterns:\n\nReorder the variables\n\nMaking lines cross may be better than making them parallel\n\nMake lines transparent (change alpha)\n\nInterpolation\n\nInstead of using straight lines, we can use splines or other interpolated curves\nThis helps separate lines sharing the same value of some variables\n\nHighlight a trend\n\nUse colors to separate the trend and other lines\n\nImplementations\n\nggplot2::geom_line()\n\nUse <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/tidyr/\">tidyr</a> to transform variable names to x-axis first\n\nGGally::ggparcoord() (static, ggplot2)\nMASS:: parcoord() (static, base)\nparcoords::parcoords() (interactive)\n\ndevtools::install_github(“timelyportfolio/parcoords”)",
		"tags": [ "note"]
},

{
		"title": "Python",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/python/",
		"content": "Python\n\nOfficial Library\n[My Code Library](file:///D:/OneDrive1/6-UT/62-CB/62.01-python)\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Basics</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Everything</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Coding Conventions</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Input and Ouput</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Types</a>\n\n$\nTypes\n\nBuilt-in Types\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Number</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Sequence</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">String</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">List</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Tuple</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Dictionary</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Set</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">range</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">NoneTyoe</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Functions</a>\n\n$\nFunctions\n\nBuilt-in Functions\n\nMost common\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">print</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">input</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">del</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">open</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Types</a> related\n\nDistinguish types\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">isinstance</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">type</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Number</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">int</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">chr &amp; ord</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">abs</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Sequence</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">List</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">list</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">String</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">str</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">eval</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">chr &amp; ord</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Tuple</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">tuple</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Dictionary</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">dict</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">globals</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">locals</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Set</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">set</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">range</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">bool</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">bool</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Iterable</a> related\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">len</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">min, max</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">sum</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">iter</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">next</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">sorted</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">reversed</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">enumerate</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">zip</a>\n\nFunctions related\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">map</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">filter</a>\n\n^fun-rel-fun\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Module</a>\n\n$\nModules\n\nBasic Modules\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">re</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">os</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">os.path</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">NumPy</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Matplotlib</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Tkinter</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">turtle</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">time</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">sys</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">functools</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">tkinter.filedialog</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">math</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">random</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">operator</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Modules - string</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">NetworkX</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements</a>\n\n所有程序控制结构\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Loops</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">for</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">while</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">continue</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">break</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">pass</a>\n\nPython condition\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">if</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">elif</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">else</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Functions</a> definitions\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">def</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">return</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">yield</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Scope</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">global</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">nonlocal</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Exception Handling</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">try</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">except</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">finally</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">raise</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">assert</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Class</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">class</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">import</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">with</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">del</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Keywords</a>\n\n$\nKeywords\n\n所有关键字\n\nKeyword\nRole\n\nand\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Operators - Logical Operators</a>\n\nas\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Keywords - as</a>\n\nassert\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - assert</a>\n\nasync\nDeclares a function as an asynchronous function(coroutine)\n\nawait\nPasses the asynchronous function control back to the event loop\n\nbreak\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - break</a>\n\nclass\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - class</a>\n\ncontinue\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - continue</a>\n\ndef\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - def</a>\n\ndel\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - del</a>\n\nelif\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - elif</a>\n\nelse\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - else</a>\n\nexcept\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - except</a>\n\nFalse\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Types - bool</a>\n\nfinally\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - finally</a>\n\nfor\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - for</a>\n\nfrom\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Keywords - from</a>\n\nglobal\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - global</a>\n\nif\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - if</a>\n\nimport\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - import</a>\n\nin\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Operators - Membership Operators</a>\n\nis\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Operators - Identity Operators</a>\n\nlambda\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Lambda Function</a>\n\nNone\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Types - NoneType</a>\n\nnonlocal\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - nonlocal</a>\n\nnot\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Operators - Logical Operators</a>\n\nor\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Operators - Logical Operators</a>\n\npass\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - pass</a>\n\nraise\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - raise</a>\n\nreturn\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - return</a>\n\nTrue\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Types - bool</a>\n\ntry\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - try</a>\n\nwhile\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - while</a>\n\nwith\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - with</a>\n\nyield\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Statements - yield</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Methods</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Class</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Expressions</a>\n\n所有运算符\n\n类别\n运算符\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">算术运算符</a>\n+, -, *, /, //, %, **\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">关系运算符</a>\n&gt;, &lt;, ==, &lt;=, &gt;=, !=\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">成员运算符</a>\nin, not in\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">身份运算符</a>\nis, is not\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">逻辑运算符</a>\nand, or, not\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">位运算符</a>\n~, &amp;, |, ^, &lt;&lt;, &gt;&gt;\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">赋值运算符</a>\n=, +=, -=, *=, /=, //=, %=\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Conditional Expressions</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Sequence</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Sequence Unpacking</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Slice</a>\n\nOther\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python File Handling</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Exception Handling</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Scope</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python Keywords, Expressions and Statements</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python VS Code</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Rounding to Integer</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Python One-liner</a>\n\nProjects\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Laura Chess</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Cellular Automata</a>",
		"tags": [ "note"]
},

{
		"title": "Q-Q Plot",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/q-q-plot/",
		"content": "Q-Q Plot\nA Q–Q plot (quantile-quantile plot) is a probability plot, a graphical method for comparing two probability distributions by plotting their quantiles against each other. A point (x,y) on the plot corresponds to one of the quantiles of the second distribution (y-coordinate) plotted against the same quantile of the first distribution (x-coordinate).\n\n[!ex] Quartile-Quartile Plot\nFor example, when using quartiles as the only quantiles, there are only five points on a graph, representing (0%, 25%, 50%, 75%, 100%) respectively.\n\nIf the two distributions being compared are similar, the points in the Q–Q plot will approximately lie on the identity line y=x. If the distributions are linearly related, the points in the Q–Q plot will approximately lie on a line, but not necessarily on the line y=x. Q–Q plots can also be used as a graphical means of estimating parameters in a location-scale family of distributions.\nQ–Q plots are commonly used to compare a data set to a theoretical model. For example, collected data and a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Normal Distribution</a>.\nQ–Q plots can also be used to compare collections of data, which can be viewed as a non-parametric approach to comparing their underlying distributions. A Q–Q plot is generally more diagnostic than comparing the samples' <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/histogram/\">Histogram</a>s, but is less widely known.\nSince Q–Q plots compare distributions, there is no need for the values to be observed as pairs, as in a scatter plot, or even for the numbers of values in the two groups being compared to be equal.\n\nAnother graphical method to compare distributions is to compare the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-curve/\">Density Curve</a>s.\n\nQ-Q Line\nA Q-Q line is a line connecting the two points at specified quartiles of the two distributions. The default quartiles are the first and the third.\nR Plot\nx &lt;- rexp(1000, rate = 1) # exponential distribution\n# built-in function\nqqnorm(x)\n\n# DIY\nn &lt;- rnorm(1000) # normal distribution\nqx &lt;- quantile(x, probs=seq(0,1,.001))\nqn &lt;- quantile(n, probs=seq(0,1,.001))\nplot(qn,qx)",
		"tags": [ "note"]
},

{
		"title": "R Basics",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/r-basics/",
		"content": "R Basics\n\nComments start with #\n\nNo specific syntax for multi-line comments\n\nIndex starts from 1\n\nMost index in R are inclusive\n\nc(1,2,3)[1:2] returns 1 2\n\nThe naming convention of files and variables is snake_case\n\nPrint variables using print\n\nAssign a value to a variable using\n\nx &lt;- 1 (preferred traditionally)\n1 -&gt; x\nx = 1\n\nVariables in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a> are dynamic typing like <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/python/\">Python</a>\n\nThe default arithmetics in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a> are element-wise, unlike <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">MATLAB</a>\n\nThe interactive shell of <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a> uses an indicator [x] to show the index of the printed vector\n\nexample:\n\n&gt; x &lt;- 11:30\n&gt; x\n[1] 11 12 13 14 15 16 17 18 19 20 21 22\n[13] 23 24 25 26 27 28 29 30\n```\n- Use function `View()` to view data in a specific RStudio viewer",
		"tags": [ "note"]
},

{
		"title": "R Statement",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/r-control-statement/",
		"content": "Control Statement\nfor\nfor (i in 1:4) {\nprint(i)\n}\n\nwhile\na &lt;- 10\nwhile (a &gt; 4) {\ncat(a, &quot;...&quot;, sep = &quot; &quot;)\na &lt;- a - 1\n}\n\n[!warning]\nKeep in mind that for and while loops run slowly in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>.\nOperations on entire vectors (i.e. a whole row, a whole column)\nor apply()-type functions are preferred\n\nif/else\nif (4 &gt; 3) {\nprint(&quot;4 is greater than 3&quot;)\n} else if (4 == 3) {\nprint(&quot;4 is equal to 3&quot;)\n} else {\nprint(&quot;4 is less than 3&quot;)\n}",
		"tags": [ "note"]
},

{
		"title": "R Data Structure",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/r-data-structure/",
		"content": "R Data Structure\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-type/\">R Type</a>s are types for the smallest objects in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>. Furthermore, these objects can form more complex data structures.\nVector\nIn <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>, every single value, like 5L, is considered a vector of length 1.\nThere is one rule about vectors: a vector can only contain objects of the same type.\nIf you combine objects of different types into a vector, the objects will be transformed into the same type.\nUse function c (for &quot;combine&quot;) to create a vector with more than 1 element.\nlength(5L)\nx &lt;- c(2L,5)\nlength(x) # 2\nclass(x) # numeric\nclass(x[1]) # numeric\n\nFor integers and numerics, a shortcut for generating a vector is the : operator.\nc(1,2,3,4) == 1:4\n\nIndexing\nUse square brackets [] and index (starting from 1) to fetch the elements from a vector. Use a colon : to specify a range.\nc(6,8)[1]\nx &lt;- c(6, 8, 7, 5, 3, 0, 9)\nx[1:3]\nx[c(1,4,5,8)]\n\nType Coercion\nIn vectors, implicit type coercions will be done. You can also do explicit type coercions.\nas.character(c(6, 8)) # &quot;6&quot; &quot;8&quot;\nas.logical(c(1,0,1,1)) # TRUE FALSE TRUE TRUE\n# as.numeric(&quot;Bilbo&quot;)\n# Warning message:\n# NAs introduced by coercion\n\nMatrix\nMatrix is a special two-dimensional data structure in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>. The class of it is &quot;matrix&quot; &quot;array&quot;.\nLike a vector, the elements in a matrix should/will be of the same <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-type/\">R Type</a>.\nTo create a matrix, using the following function\nM &lt;- matrix([data =] data, [nrow =] 3, [ncol =] 2)\n\n[!rmk]\n\nWhen the first arg is missing, e.g. matrix(,2,2), the matrix is empty (with elements being NA)\nThe length of the first arg can be a sub-multiple or a multiple of the number of rows\nWhen the second or the third arg is missing, their default is 1\n\nIndexing\nSince a matrix is two-dimensional, the index has two arguments, like M[1,2]. When the argument is missing, it is interpreted as a colon : in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Matlab Array - Indexing</a>.\nM &lt;- matrix(1:4,2,2)\nM[,]\nM[1,]\nM[,2] &lt;- 5\nM[]\n\nData Frame\nData frames are used to store tabular data (2d) in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>. They are represented as a special type of list where every element of the list has to have the same length.\nData frames are usually created by reading in a dataset using the read.table() or read.csv(). However, data frames can also be created explicitly with the data.frame()function or they can be coerced from other types of objects like lists.\nstudents &lt;- data.frame(c(&quot;Cedric&quot;, &quot;Fred&quot;, &quot;George&quot;, &quot;Cho&quot;, &quot;Draco&quot;, &quot;Ginny&quot;),\nc( 3, 2, 2, 1, 0, -1),\nc( &quot;H&quot;, &quot;G&quot;, &quot;G&quot;, &quot;R&quot;, &quot;S&quot;, &quot;G&quot;))\nnames(students) &lt;- c(&quot;name&quot;, &quot;year&quot;, &quot;house&quot;) # name the columns\nclass(students) # &quot;data.frame&quot;\nstudents\n# =&gt;\n# name year house\n# 1 Cedric 3 H\n# 2 Fred 2 G\n# 3 George 2 G\n# 4 Cho 1 R\n# 5 Draco 0 S\n# 6 Ginny -1 G\nclass(students$year) # &quot;numeric&quot;\nclass(students[,3]) # &quot;factor&quot;\n# find the dimensions\nnrow(students) # 6\nncol(students) # 3\ndim(students) # 6 3\n\n# There are many twisty ways to subset data frames, all subtly unalike\nstudents$year # 3 2 2 1 0 -1\nstudents[, 2] # 3 2 2 1 0 -1\nstudents[, &quot;year&quot;] # 3 2 2 1 0 -1\n\n# To drop a column from a data.frame or data.table,\n# assign it the NULL value\nstudents$houseFounderName &lt;- NULL\n\nArray\nAn array in R is a multi-dimensional homogenous (of the same <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-type/\">R Type</a>) data structure, like <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Matlab Array</a>.\narray(c(c(c(2, 300, 4), c(8, 9, 0)), c(c(5, 60, 0), c(66, 7, 847))), dim = c(3, 2, 2))\n\nList\nA list is a multi-dimensional heterogeneous data structure.\nx &lt;- list(1, &quot;a&quot;, TRUE, 1 + 4i)\n\nLists are like <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">dictionaries</a>: you can give each value a name:\nx &lt;- list(time = 1:40)\nx$price = c(rnorm(40, .5 * x$time, 4))\n\n# You can get items in the list like so\nlist1$time # by name\nlist1[[&quot;time&quot;]] # by name\nlist1[[1]] # by index\n\n[!rmk]\n\nList is the only heterogeneous structure so far (<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">#Vector</a>, <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">#Matrix</a>, and <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">#Array</a> are all homogenous)\nList also has special index—it needs double brackets\n\n[!info]\nLists are not the most efficient data structure to work with in R; unless you have a very good reason, you should stick to data.frames.\nLists are often returned by functions that perform linear regressions",
		"tags": ["Vector", "Matrix", "Array", "note"]
},

{
		"title": "R Function List",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/r-function-list/",
		"content": "R Function List\nStatistics\n\nsum\nmin, max\nlength\nmean\nmedian\nvar\nsd standard deviation\ncor\nlm linear model\nsummary\ncoef\n\nx = c(4,6,12,9,21,14)\nmean(x)\nvar(x)\nmedian(x)\n\ny = c(10,13,22,15,30,15)\ncor(x,y)\n\nGeneration\n\nvector\n\nvector(&quot;numeric&quot;, length = 10) generates a vector having 10 zeros\n\nseq([from =] a, [to =] b, [by =] stepsize)\n\nseq(1,10,3)\n\nMatrix\n\nmatrix(data,nrow,ncol)\nrbind(first_row, second_row, ...)\ncbind(first_column, second_column, ...)\nsolve can give the inverse of the matrix\ndim\n\nA matrix can be created directly from a vector by adding a dimension attribute\n\n# Turn a vector into a matrix by adding a dimension attribute\nm &lt;- 1:10\ndim(m) &lt;- c(2,5)\nm\n\nManipulation\n\nsort\nhead(vec,n)\ntail(vec,n)\n\nx &lt;- c(6, 8, 7, 5, 3, 0, 9)\nhead(x,2)\ntail(x,3)\n\nFor Matrices\n\nt transpose\ndet\n\nLogic\n\nThe argument of the below functions is conditional expressions\nwhich\nany\n\nx &lt;- c(6, 8, 7, 5, 3, 0, 9)\nwhich(x %% 2 == 0)\b # return indexes\nany(x == 10)\n\nPlot\n\nplot\n\nQuick-R: Graphical Parameters\n\nstem\nhist\nbarplot",
		"tags": [ "note"]
},

{
		"title": "R Function",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/r-function/",
		"content": "R Function\nTo define a function\njiggle &lt;- function(x) {\nx = x + rnorm(1, sd=.1)\nreturn(x)\n}\njiggle(5)\n\nThe return function is not necessary; it can be any statement that returns a result. For example\nf &lt;- function(x) { x*x }\nf(4)",
		"tags": [ "note"]
},

{
		"title": "R Operator - Pipe",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/r-operator-pipe/",
		"content": "R Operator - Pipe\nA pipe operator passes the output of the last command to the next command, like | in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Shell</a>. A pipe operator simplifies two steps\n\nAssign the result to a variable\n\nWhen using a pipe operator, the output will not be printed to the stdout\n\nPass the variable to a command/function\n\nWhen piping into a function, its first argument can be omitted\n\n%&gt;%, a famous pipe operator in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a> introduced by magrittr[1] package, is widely used by many <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-package/\">R Package</a>s, like <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/dplyr/\">dplyr</a>.\n\n[!ex] An Example\nmtcars %&gt;%\nfilter(mpg &gt; 25) %&gt;%\narrange(desc(mpg)) %&gt;%\nggplot(data=.,aes(x=row.names(.), y=mpg)) +\ngeom_bar(stat=&quot;identity&quot;)\n\nBehind the scenes, x %&gt;% f(y) turns into f(x, y), and x %&gt;% f(y) %&gt;% g(z)turns into g(f(x, y), z) and so on.\nThe pipe operator enable us to focus on the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/dplyr/\">transformations</a>, not what’s being transformed. It also makes the code easier to read: replace %&gt;% with &quot;then&quot; when reading code.\nIn <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a> 4.1, a built-in pipe operator is introduced: |&gt;. This operator doesn't rely on third-party packages and may be faster. But it lacks two important features that %&gt;% has\n\nrepresent the value being piped in by ., as in the above example\nwhen you pipe into a function with no other arguments, you can omit the parentheses ()\n\nRene Magritte has a famous painting that says &quot;This is not a pipe.&quot; ↩︎",
		"tags": [ "note"]
},

{
		"title": "R Operator",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/r-operator/",
		"content": "Operator\nArithmetic\n10L + 66L # integer\n2.0 * 2L # numeric\n1 / 2\nc(1,2,3)^2\n\n# Remainder\n3 %% 2 # 1 (numeric)\n3L %% 2L # 1 (integer)\n\n# Integer Division\n5 %/% 2\n5 == 2 * (5 %/% 2) + (5 %% 2) # TRUE\n\n# Element-wise product\nc(1,2,3) * c(3,2,1)\n\nNote that\n\n$\ninline n-link\n\nThe default arithmetics in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a> are element-wise, unlike <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">MATLAB</a>\n\n. There are special operators for matrix arithmetics.\nA %*% B\n\nComparison\n1 &gt; 2\n2 &lt;= 3\nTRUE == TRUE\nFALSE != FALSE\n\n# Element-wise comparison\nc(1,2,3) == c(1,2,4) # TRUE TRUE FALSE\nc(1,2,3) == 1 # TRUE FALSE FALSE\n\n# Identify if an element belongs to a vector.\n1 %in% c(1,2,3)\n\nUse near(x,y) to compare two floating point numbers.\n\nLogic\nTRUE | FALSE # or\nTRUE || FALSE # or\nTRUE &amp; FALSE # and\nTRUE &amp;&amp; FALSE # and\n!TRUE # not\n\n# Element-wise logic operations\nc(TRUE, FALSE, FALSE) | c(FALSE, TRUE, FALSE) # TRUE TRUE FALSE\n\nAssignment\nx &lt;- 1\ny = 1\nz &lt;&lt;- 1\n1 -&gt; u\n1 -&gt;&gt; w\ncat(x, y, z, u, w)\n\nIt's a convention to use &lt;- rather than = for assignment, and leave = only for function arguments. The reasons are compatibility and precedence (&lt;- is slightly higher, and = is used for function arguments before the assignment)\n\nThe special assignment operators &lt;&lt;- and -&gt;&gt; are looking up operators, and can maintain states. They can assign value to the variables in the parent scopes. See the example\nnew_counter &lt;- function() {\ni &lt;- 0\nfunction() {\ni &lt;&lt;- i + 1 # see if you change &lt;&lt;- to &lt;-\ni\n}\n}\n\ncounter_one &lt;- new_counter() # outer function, with i = 0\ncounter_two &lt;- new_counter()\n\ncounter_one() # call ther inner function, i is changed to 1\ncounter_one() # i is changed to 2, the state is maintained\ncounter_two()\n\nOther\n# Colon for sequence generating\nall(1:4 == seq(1,4,1))\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-operator-pipe/\">R Operator - Pipe</a>",
		"tags": [ "note"]
},

{
		"title": "R Package",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/r-package/",
		"content": "R Package\n# Install a package\ninstall.packages(&quot;tidyverse&quot;)\n# Load a package\nlibrary(&quot;tidyverse&quot;)\n\nIf we need to be explicit about where a function (or dataset) comes from, we’ll use the special form package::function(). For example, ggplot2::ggplot() tells you explicitly that we’re using the ggplot() function from the ggplot2 package\nTo install from GitHub:\nlibrary(devtools)\ndevtools::install_github(&quot;metalyrics/rmetacritic&quot;)",
		"tags": [ "note"]
},

{
		"title": "R Type - Date",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/r-type-date/",
		"content": "Date\n&quot;Date&quot; is a special data class for date values in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>. Strictly saying, Date is not an <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-type/\">R Type</a>, but a class. A class is an attribute assigned to an object regardless of its internal storage structure. To see this, execute the following code\nx &lt;- as.Date(&quot;2022-11-03&quot;)\nclass(x) # &quot;Date&quot;\ntypeof(x) # &quot;double&quot;\n\nThe only correct date format: YYYY-MM-DD\n\nConversion to Date\n\nUse as.Date(x) to convert to Date class\n\nYou need to specify the format of x if it is not in YYYY-MM-DD\n\nas.Date(&quot;1/12/2019&quot;, format=&quot;%m/%d/%Y&quot;)\nPay attention to the format: wrong format may give the wrong date\n\nas.Date(&quot;1/12/2019&quot;, format=&quot;%m/%d/%y&quot;) gives &quot;2020-01-12&quot; because %y is for a two-digit year, and is replaced by 20 here\n\nSee <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">#Conversion Specification</a> for the conversion specification reference\n\nA similar function: reader::parse_date\n\nparse_date will return NA for parse_date(&quot;1/12/2019&quot;, format=&quot;%m/%d/%y&quot;)\n\nUse package <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/lubridate/\">lubridate</a>\n\nConversion Specification\n\nConversion specification\nDescription\nExample\n\n%A\nFull weekday\nSunday, Thursday\n\n%b or %h\nAbbreviated month\nMay, Jul\n\n%B\nFull month\nMay, July\n\n%d\nDay of the month (01-31)\n27, 07\n\n%j\nDay of the year (001-366)\n148, 188\n\n%m\nMonth (01-12)\n05, 07\n\n%U\nWeek (01-53) with Sunday as the first day of the week\n22, 27\n\n%w\nWeekday (0-6) with Sunday as 0\n0, 4\n\n%W\nWeek (00-53) with Monday as the first day of the week\n21, 27\n\n%x\nDate, locale-specific\n\n%y\nYear without century (00-99)\n84, 05\n\n%Y\nYear with century\n1984, 2005\n\n%C\nCentury\n19, 20\n\n%D\nDate formatted %m/%d/%y\n05/27/84, 07/07/05\n\n%u\nWeekday (1-7) Monday is 1\n7, 4\n\n%n\nNewline on output or arbitrary whitespace on input\n\n%t\nTab on output or arbitrary whitespace on input\n\nSee ?strptime for the reference inside <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>.\n\nDate Operation\nDate class supports the following operations\n# Subtraction\nas.Date(&quot;2022-11-01&quot;) - as.Date(&quot;2020-11-01&quot;)\n# Time difference of 730 days\n\n# Addition\nas.Date(&quot;2022-11-01&quot;) + 7\n# &quot;2022-11-08&quot;\n\n# Comparison\nas.Date(&quot;2022-11-01&quot;) &lt; as.Date(&quot;2020-11-01&quot;)\n# False\n\nscale_x_date\nSince dates can be calculated and compared, it is easy to specify the limits and breaks in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>.\n\nbase + sacle_x_date(limits = c(ymd(&quot;2022-01-01&quot;), ymd(&quot;2022-11-03&quot;)))\nbase + sacle_x_date(limits = c(Sys.Date() - 19, NA))\nbase + sacle_x_date(breaks = &quot;1 week&quot;))\nbase + scale_x_date(date_labels = &quot;%b %d&quot;)\n\nOther Functions\n\nSys.date() returns today's date\nweekdays(), months(), and quarters() return the weekday, month, and quarter of the date respectively",
		"tags": ["Conversion", "note"]
},

{
		"title": "R Types",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/r-type/",
		"content": "R Types\n\nHere we just introduce some basic &quot;atomic&quot; data types. There are many more, like dates and time series.\n\nUse function is.x(), such as is.na() and is.complex(), to test the type of an <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a> object.\n\nType\nAbbreviation\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Integer</a>\nint\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Numeric</a>\ndbl\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Characters</a>\nchr\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Logical</a>\nlgl\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Factors</a>\nfctr\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-type-date/\">Date</a>\ndate\n\nDate-times\ndttm\n\nInteger\nLong-storage integers are written with L (otherwise they will be numerics)\nclass(5L) # &quot;integer&quot;\n\nNumeric\nA &quot;numeric&quot; is a double-precision floating-point number.\nScientific notations, infinities, and Not-a-Number are supported.\n5e4\n1.6e-35\nInf\nclass(-Inf)\nclass(NaN)\n\nComplex\nThe imaginary part of a complex is appended with an i in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>.\nx &lt;- 1 + 1i\ny &lt;- -1i + 1\nx * y\nclass(x - 1i) # complex\n\nCharacters\nThere is no difference between strings and characters in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>, unlike <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">MATLAB</a>.\nAnd a string and a character are both char vectors of length 1.\nCharacters are surrounded by double quotes &quot; (or single quotes ').\nlength(&quot;Hello&quot;)\nlength(c(&quot;Hello&quot;,&quot;World&quot;))\n\nLogical\nCapital TRUE, FALSE, and NA are three logicals in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>\nTRUE # not true or True\nclass(NA)\nFALSE == FALSE # TRUE\n\nT and F are shorthands for TRUE and FALSE.\n\nFactors\nFactors are used to represent <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-categorical-data/\">EDAV - Categorical Data</a> and can be unordered or ordered. One can think of a factor as an integer vector where each integer has a label.\nx &lt;- factor(c(&quot;yes&quot;, &quot;yes&quot;, &quot;no&quot;, &quot;yes&quot;, &quot;no&quot;))\nx\n# [1] yes yes no yes no\n# Levels: no yes\n## The &quot;levels&quot; are the values the categorical data can take\nlevels(x)\n\ntable(x)\n# x\n# no yes\n# 2 3\n## See the underlying representation of a factor\nunclass(x)\n# 2 2 1 2 1\n# attr(x,&quot;levels&quot;)\n# [1] &quot;no&quot; &quot;yes&quot;\n\nFactor levels have an order\n\nNot like <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">#Characters</a>, which obey alphabetical order\n\nFactor levels serve as labels for data\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/forcats/\">forcats</a> is a useful package for manipulating factors\n\nNULL\nCapital NULL is a special empty object in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>.",
		"tags": ["Characters", "note"]
},

{
		"title": "R",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/r/",
		"content": "R\nR is a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Scripting Language</a> for <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">statistical computing</a> and graphics. It is an open-source implementation of the S programming language, and has stronger object-oriented programming facilities.\nR has mature integrations with <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Markdown</a> and <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">LaTeX</a>.\nYou can run R commands within a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">LaTeX</a> document.\nAlso, R is supported by <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Jupyter</a> by default.\nReferences\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-basics/\">R Basics</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-type/\">R Type</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-type-date/\">R Type - Date</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-data-structure/\">R Data Structure</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-control-statement/\">R Control Statement</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-function/\">R Function</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-function-list/\">R Function List</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-operator/\">R Operator</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-operator-pipe/\">R Operator - Pipe</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-package/\">R Package</a>\n\ntidyverse\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/dplyr/\">dplyr</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/forcats/\">forcats</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/tidyr/\">tidyr</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/lubridate/\">lubridate</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Plotly</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/rvest/\">rvest</a>",
		"tags": [ "note"]
},

{
		"title": "Ridgeline",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/ridgeline/",
		"content": "Ridgeline\nA ridgeline plot is a way of visualizing multiple <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-curve/\">densities</a> in a single plot. This plot type is useful for visualizing data that has many different levels of density, such as data that has been binned. Ridgeline plots are similar to area charts, but they emphasize the shape of the data more than the area.\nRidgelines show modes and movement better.\nBut generally, ridgelines won't provide more insight than other graphs. It even loses information since it is a smooth approximation of the data and doesn't provide exact statistics like <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/boxplot/\">Boxplot</a>.\n\nggridges is an implementation for ridgelines.",
		"tags": [ "note"]
},

{
		"title": "Scatterplot Matrix",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/scatterplot-matrix/",
		"content": "Scatterplot Matrix\nIf we want to show the relationships between n≥2 variables {xi}i=1n using <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot/\">Scatterplot</a>s, we need ∑i=1n∑j&gt;in1=n(n−1)/2 scatterplots. If we plot xi∼xj and xj∼xi as two different plots, then we have n2−n plots. Then adding labels, we have a scatterplot matrix.\n\nWhen passing multiple variables to the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a> built-in function plot, it will create a scatterplot matrix.\nWhile this is quite useful for personal exploration of a dataset, it is not recommended for presentation purposes. Something called the Hermann grid illusion makes this plot very difficult to examine.\n\nOther implementations\n\nggpairs() in GGally\nsplom() in lattice",
		"tags": [ "note"]
},

{
		"title": "Scatterplot",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/scatterplot/",
		"content": "Scatterplot\nA scatter plot uses Cartesian coordinates to display values for typically two variables for a set of data. The data are displayed as a collection of points, each having the value of two variables determining the position.\nThe major role of scatterplots lies in revealing associations (<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-dependency-relationship/\">EDAV - Dependency Relationship</a>) between variables, not just linear associations, but any kind of association.\nFeatures\n\nCausal relationships\n\ncorrelation ≠ causation, but we still use the y-axis for what appears to be the dependent variable\n\nAssociations\n\ndescribe what you see\n\nOutliers\nClusters\nGaps\nBarriers (boundaries)\nConditional relationships\n\ndifferent relationships for different intervals of x\n\nAn Example\n\nWe can observe that\n\nBoundaries\n\nNo films have high votes and low ratings\nNo films have high votes and an average rating close to the maximum possible\n\nFor films with more than a few votes, the average rating increases w/ # of votes\nOutliers: some films appear to have lower-than-expected ratings\nFilms with low votes may have any average rating (full range)\n\nThe only films with very high ratings are those with relatively few votes\n\nOverplotting\nAs we can see in the above example, scatterplots may overplot, making dots stacked together. There are some strategies for this problem\n\nChange the points in some way\n\nopen circles\nalpha blending\n\ngeom_point(alpha = .3, stroke = 0)\n\nsmaller dots\n\nDefault value in geom_point is size = 1.5\n\nWe can use ggplot2:::check_subclass(&quot;point&quot;, &quot;Geom&quot;)$default_aes to see the default values in <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>\n\nMake shape = &quot;.&quot;\n\nDon't plot all points\n\nrandomly sample data\n\n|&gt; slice_sample(n = 1000)\n\nsubset data\n\nstatic: by percentiles\ninteractive: <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplotly(), plot_ly()</a>\n\nremove outliers\n\nTransform to log scale\n\n+ scale_x_log10()\n+ scale_x_log10(breaks = c(1, 10, 100, 1000, 10000))\n\nSmooth Scatterplot\nA smooth scatterplot is a combination of a scatterplot, a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a>, and a <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-contour-plot/\">Density Contour Plot</a>. It plots the points and uses colors and shapes to show the magnitude of clusters. Use the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a> built-in function smoothScatter(x,y) to create a smooth scatterplot.",
		"tags": [ "note"]
},

{
		"title": "Spatial Data",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/spatial-data/",
		"content": "Spatial Data\nSpatial data is any type of data that directly or indirectly references a specific geographical area or location. Sometimes called geospatial data or geographic information.\nBest case for mapping spatial data: when geography matters. Do not overuse it.\nGraphs\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/choropleth/\">Choropleth</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/geographic-coordinate/\">Geographic Coordinate</a>\n\nsf and tmap\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-package/\">R Package</a> sf is for reading shape files (.shp). To see the read map, use function st_geometry() and plot the returned object.\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-package/\">R Package</a> tamp is for plotting maps (generated by sf) together with other data. The general workflow is\n\nGet the spatial data by reading the shape file using sf\nCombine spatial data and other data\n\ne.g. use left_join()\n\nplot the combined data using tmap",
		"tags": [ "note"]
},

{
		"title": "dplyr",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/dplyr/",
		"content": "source: 5 Data transformation | R for Data Science\ndplyr\nData transformation is a pre-process of getting the data in the right form to present. Typically, in R, we use dplyr package to do this task.\nMain functions in dplyr are called verbs and work similarly:\n\nThe first argument is a data frame\nThe subsequent arguments describe what to do with the data frame, using the variable names (without quotes)\nThe result is a new data frame\n\nfilter()\nfilter() allows you to subset observations based on their values.\nThe first argument is the name of the data frame.\nThe second and subsequent arguments are the expressions that filter the data frame (returned data frame should satisfy these expressions).\njan1 &lt;- filter(flights, month == 1, day == 1)\n\nMultiple arguments to filter() are combined with &quot;and&quot;: every expression must be true in order for a row to be included in the output.\nDon't use short-circuiting logical operators here. Because the expressions in filter() filter all the data items.\nfilter() filters out both FALSE and NA\n\narrange()\narrange() takes a data frame and a set of column names (or more complicated expressions) to order rows. If you provide more than one column name, each additional column will be used to break ties in the values of the preceding columns.\narrange(flights, year, desc(month), day)\n\ndesc() is used to reverse the order\nMissing values NA are always sorted at the end\n\nselect()\nselect() is used to select columns (variables). Some ways to fill the arguments\n\nA,B,C\nalias = A renames the column\nA:B selects all columns between A and B (inclusive)\n-(A:B) selects all columns except those from A to B\nstarts_with(&quot;abc&quot;) matches names that begin with abc\nends_with(&quot;xyz&quot;) matches names that end with xyz\ncontains(&quot;ijk&quot;) matches names that contain ijk\nmatches(&quot;(.)\\\\1&quot;) selects variables that match a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Regular Expression</a>\nnum_range(&quot;x&quot;, 1:3) matches x1, x2 and x3\neverything() matches all columns, only useful when you want to move some columns to the start\n\nmutate()\nmutate() adds new columns at the end of the data frame.\nmutate(flights_sml,\ngain = dep_delay - arr_delay,\nspeed = distance / air_time * 60,\ngain_per_hour = gain / hours # refers to a column just created\n)\n\nmutate() keeps the old columns. To only keep the new variables, use transmute().\nsummarise()\nsummarise() or summarize() collapses a data frame to a single row, with values calculated by functions that take the whole data as the argument, like mean and sum.\nsummarise() is more useful paired with function group_by(). group_by() returns a grouped data frame (you can think it adds a new column group). When applied to a grouped data frame, summarise() will summarize each group.\n\n[!rmk] Ungroup\nGrouped data frame has a groups attribute, while summarise() will remove it.\nIf the data frame is grouped by multiple variables, summarise() will remove one (the last one) group variable.\nYou can also use ungroup() to manually remove the groups.\n\n[!ex] Grouped Percentages\nWhen calculating the proportions, pay attention to the groups. If you want to calculate the absolute proportion, ungroup first; if you want to calculate the relative proportion within the group, be careful when summarise removes the group.\nsuppressMessages(library(tidyverse))\ndf &lt;- as.data.frame(Titanic)\ndf2 &lt;- df %&gt;%\ngroup_by(Class, Survived) %&gt;%\nsummarize(Freq = sum(Freq)) %&gt;%\nungroup() %&gt;% # very important for absolute prop\nmutate(prop = Freq/sum(Freq))\nprint(df2)\n\ndf3 &lt;- df %&gt;%\ngroup_by(Class, Survived) %&gt;%\nsummarize(Freq = sum(Freq)) %&gt;% # summersize removes the Survived group\nmutate(prop = Freq/sum(Freq)) # relative proportion in Classes\nprint(df3)\n\nUseful summary functions:\n\nmean(), median(), sum()\n\nuse option na.rm = TRUE to remove the NAs before aggregation\n\nn(), n_distinct(var) for count\n\nn() includes NAs, use sum(!is.na(x)) to count non-NAs\n\nmin(), max(), quantile(x, 0.25)",
		"tags": [ "note"]
},

{
		"title": "EDAV Garden",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/",
		"content": "EDAV Garden\n\n\"Visualization is a fundamentally human activity.\"\n\n[!garden] This site is a digital garden[1] for Exploratory Data Analysis and Visualization\n\nmade by me\non materials from GR5702 Exploratory Data Analysis and Visualization course with Joyce Robbins at Columbia University\nwith Obsidian and Obsidian Digital Garden\nsource code: zcysxy/edav-garden\nInterested in the logos/favicon? Get them here\n\n[!success] Promotion\nAre you interested in the relationship between the reviews and streams of music? Please have a look at our EDAV project: Review vs. Stream.\n\nWhat is EDAV\n\nExploratory data analysis and visualization (EDAV) is an interdisciplinary field combining\n\nStatistics\nComputer Science\nGraphic Design\nJournalism\nSubject Expertise\nPsychology\n\nThe task of EDAV is to\n\nLook for patterns\nIdentify outliers\nMake comparisons\nDiscover clusters\n\nThe fundamental problem of EDAV is\n\nExploration vs. Visualization\nor, Exploratory vs. Explanatory\nExplorations reveal information hidden in the data, which is deep and precise but can be convoluted\nVisualizations offer insight into the data, which can be easily shared but may be misleading and biased\nThese two aspects are not mutually exclusive\n\nPlots Gallery\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-continuous-variable/\">Continuous Variable</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/histogram/\">Histogram</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/boxplot/\">Boxplot</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/q-q-plot/\">Q-Q Plot</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-curve/\">Density Curve</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/ridgeline/\">Ridgeline</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-categorical-data/\">Categorical Data</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/bar-chart/\">Bar Chart</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/cleveland-dot-plot/\">Cleveland Dot Plot</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-dependency-relationship/\">Dependency Relationship</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot/\">Scatterplot</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/density-contour-plot/\">Density Contour Plot</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-multivariate-continuous-data/\">Multivariate Continuous Data</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/scatterplot-matrix/\">Scatterplot Matrix</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/parallel-coordinate/\">Parallel Coordinate</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/biplot/\">Biplot</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-multivariate-categorical-data/\">Multivariate Categorical Data</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/mosaic-plot/\">Mosaic Plot</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/heatmap/\">Heatmap</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/alluvial-diagram/\">Alluvial Diagram</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-time-series/\">Time Series</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/spatial-data/\">Spatial Data</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/choropleth/\">Choropleth</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/geographic-coordinate/\">Geographic Coordinate</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-missing-data/\">Missing Data</a>\nOther\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/graph-color/\">Graph Color</a>\n\nR Garden\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r/\">R</a>\n\nReferences\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-basics/\">R Basics</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-type/\">R Type</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-type-date/\">R Type - Date</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-data-structure/\">R Data Structure</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-control-statement/\">R Control Statement</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-function/\">R Function</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-function-list/\">R Function List</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-operator/\">R Operator</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-operator-pipe/\">R Operator - Pipe</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-package/\">R Package</a>\n\ntidyverse\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">ggplot2</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/dplyr/\">dplyr</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/forcats/\">forcats</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/tidyr/\">tidyr</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/lubridate/\">lubridate</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Plotly</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/rvest/\">rvest</a>\n\nGit Garden\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/git/\">Git</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/git-commands/\">Git Commands</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Git Tagging</a>\n\nWebDev Garden\n\nBasics\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/dom/\">DOM</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/developer-tools/\">Developer Tools</a>\n\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">HTML</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">CSS</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JavaScript</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/js-function/\">JS Function</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/js-arrow-function/\">JS Arrow Function</a>\n<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">JS Function - map</a>\n\n⭐️ <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3/\">D3</a>\n\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3-bind-data/\">D3 Bind Data</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3-scale/\">D3 Scale</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3-margin/\">D3 Margin</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3-axes/\">D3 Axes</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3-functions/\">D3 Functions</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3-interactivity/\">D3 Interactivity</a>\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/d3-transition/\">D3 Transition</a>\n\nReferences\n\nFor <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Plots Gallery</a>:\n\nRobbins, Joyce. https://edav.info. 2022.\nUnwin, Antony. Graphical data analysis with R. Chapman and Hall/CRC, 2018.\n\nFor <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">R Garden</a>:\n\nWickham, Hadley, and Garrett Grolemund. R for data science: import, tidy, transform, visualize, and model data. O'Reilly Media, Inc., 2017.\n\nFor <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Git Garden</a>:\n\nChacon, Scott, and Ben Straub. Pro Git. Springer Nature, 2014.\n\nFor <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">WebDev Garden</a>\n\nRobbins, Joyce. D3 for R Users. 2022.\n\nIn plain English: A collection of notes. ↩︎",
		"tags": [ "note","gardenEntry"]
},

{
		"title": "forcats",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/forcats/",
		"content": "forcats\nPackage forcats contain tools for working with <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/edav-categorical-data/\">EDAV - Categorical Data</a> (<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">R Type#Factors</a>)\nRecode Factor Levels\nTo recode the levels, do not use levels(x) &lt;- c(&quot;A&quot;, &quot;B&quot;); use fct_recode() in <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/forcats/\">forcats</a> instead.\nlibrary(forcats)\nx &lt;- factor(c(&quot;G234&quot;, &quot;G452&quot;, &quot;G136&quot;))\ny &lt;- fct_recode(x, Physics = &quot;G234&quot;, Math = &quot;G452&quot;, Chemistry = &quot;G136&quot;)\ny\n\nReorder Factor Levels\n\nfct_inorder(): by the order in which they first appear\n\nfct_infreq(): by number of observations with each level (largest first)\n\nuseful for unbinned data\n\nfct_inseq(): by numeric value of level.\n\nfct_relevel(x, level1, level2, after = 4): by hand\n\nwithout after, you are putting levels to the beginning\nwith after = Inf, you are putting levels to the last\n\nfct_rev(): reverse the current order\n\nfct_reorder(x,y): by sorting along another variable\n\nworks with .desc = False\n\nfct_reorder2(x,y,z): by sorting along another 2 variables\n\nAll the above functions return new factors.\n\nInclude NA\nWhen a factor contains NAs, NAs will not form a level. And when plotting, NA always orders first (in the top-down graph, and last in the left-right graphs). We can use fct_explicit_na(x, &quot;NA&quot;) to make NA a real level with the name &quot;NA&quot;. Then we can reorder the levels including &quot;NA&quot;\ndf &lt;- data.frame(temperature = factor(c(&quot;cold&quot;, &quot;warm&quot;, &quot;hot&quot;, NA)),\ncount = c(15, 5, 22, 12))\n\ndf %&gt;%\nmutate(temperature = fct_explicit_na(temperature, &quot;NA&quot;) %&gt;% # try comment this and the following lines\nfct_relevel(&quot;NA&quot;, &quot;hot&quot;, &quot;warm&quot;, &quot;cold&quot;)) %&gt;%\nggplot(aes(x = temperature, y = count)) +\ngeom_col() +\ncoord_flip()\n\nLumping\n\nfct_lump_*: lump together factor levels into &quot;other&quot;\n\nfct_lump_min(): lumps levels that appear fewer than min\ntimes\n\ncc |&gt; mutate(continent_new = fct_lump_min(continent, 30)) puts all continents with less than 30 countries (items) into the &quot;Other&quot; category (level)\n\nfct_lump_prop(): lumps levels that appear in fewer prop * n times, where n is the size of the data\nfct_lump_n(): lumps all levels except for the n most frequent (or least frequent if n &lt; 0)\nfct_lump_lowfreq(): lumps together the least frequent\nlevels, ensuring that &quot;other&quot; is still the smallest level",
		"tags": [ "note"]
},

{
		"title": "lubridate",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/lubridate/",
		"content": "lubridate\n\nLubridate provides tools that make it easier to parse and manipulate dates. These tools are grouped below by common purpose. More information about each function can be found in its help documentation.\n\nLubridate comes with useful functions to\n\nConvert data to <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-type-date/\">Date class</a>\n\nymd(), ydm(), mdy(), myd(), dmy() transform string with the right order to Date class\n\nmdy(&quot;April 13, 1907&quot;) returns &quot;1907-04-13&quot;\n\nExtract information from data of <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/r-type-date/\">Date class</a>\n\nyear()\nmonth()\n\nmonth(date, label = TRUE) returns a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">factor</a> with levels being twelve months\n\nyday() returns the day of the year of a date\n\nyday(Sys.Date()) returns 298\n\nweek() returns the week of the year of a date",
		"tags": [ "note"]
},

{
		"title": "rvest",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/rvest/",
		"content": "rvest\n\nrobotstxt::paths_allowed(url) checks if a page is reachable\n\nread_html(url) gets the content of the <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">HTML</a> page, returns a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">XML</a> object\n\nhtml_table() get the tables out of a fetched HTML page, returns a <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">R Data Structure#List</a> of tibbles (dataframes)\n\nProcess a table: mytable %&gt;% filter(X1 == &quot;Version:&quot;) %&gt;% pull(X2)\n\nhtml_elements() get specific elements, returns a list\n\nhtml_elements(x, &quot;h2&quot;)\nhtml_elements(x, &quot;#current_visitors&quot;)\nhtml_elements(x, &quot;.data&quot;)\n\nhtml_element() works like html_elements(), except that it returns a single node\n\nhtml_text() get the text out of nodes\n\nrvest doesn't work with dynamically loaded content\n\nDownload the loaded page as a local file\nUse another package RSelenium",
		"tags": [ "note"]
},

{
		"title": "tidyr",
		"date":"Sat Oct 14 2023 20:19:57 GMT+0000 (Coordinated Universal Time)",
		"url":"/tidyr/",
		"content": "tidyr\nPrinciples of tidy data:\n\nEvery column is a variable\nEvery row is an observation\nEvery cell is a single value\n\nAn example:\n\nThe code for this example using package tidyr is\ntidydata &lt;- messydata %&gt;%\npivot_longer(cols = !id, names_to = &quot;roadtype&quot;, values_to = &quot;mpg&quot;)\n\npivot_longer() &quot;lengthens&quot; data, increasing the number of rows and decreasing the number of columns. The inverse transformation is pivot_wider()\n\nAs we can see, the id column is essential. Sometimes data have row names, but don't have a column name for them. Then we can create one manually\nlibrary(tidyverse)\nmtcars %&gt;%\nrownames_to_column(&quot;carname&quot;) %&gt;%\nhead()\n\n&quot;Tidy&quot; or &quot;messy&quot; depends on the use case. Sometimes, &quot;tidy&quot; data can be &quot;messy&quot; in other scenarios.",
		"tags": [ "note"]
}
]